{"persistifyArgs":{"cache":{"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\9e\\9e146e9e-d85e-4863-b061-aece26cbd6c3.js":{"source":"\"use strict\";\ncc._RF.push(module, '9e1466e2F5IY7Bhrs4my9bD', 'register');\n// script/action/login/register.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        this._login = cc.find(\"Canvas/login\");\n    },\n    onClick: function onClick() {\n        this._login.active = false;\n    }\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RF.pop();","deps":{}},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\fb\\fb977eef-db8f-432a-8f42-bf3d8d970e95.js":{"source":"\"use strict\";\ncc._RF.push(module, 'fb9777v249DKo9Cvz2Nlw6V', 'HTTP');\n// script/lib/HTTP.js\n\n\"use strict\";\n\nvar URL = \"http://127.0.0.1\";\ncc.VERSION = 2017061001;\nvar HTTP = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    statics: {\n        baseURL: URL,\n        authorization: null,\n        httpGet: function httpGet(url, callback) {\n            var xhr = cc.loader.getXMLHttpRequest();\n\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {\n                    var respone = xhr.responseText;\n                    if (callback) {\n                        callback(respone);\n                    }\n                }\n            };\n            xhr.open(\"GET\", HTTP.baseURL + url, true);\n            if (HTTP.authorization != null) {\n                xhr.setRequestHeader(\"authorization\", HTTP.authorization);\n            }\n            if (cc.sys.isNative) {\n                xhr.setRequestHeader(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n\n            // note: In Internet Explorer, the timeout property may be set only after calling the open()\n            // method and before calling the send() method.\n            xhr.timeout = 5000; // 5 seconds for timeout\n\n            xhr.send();\n        },\n        encodeFormData: function encodeFormData(data) {\n            var pairs = [];\n            var regexp = /%20/g;\n\n            for (var name in data) {\n                var value = data[name].toString();\n                var pair = encodeURIComponent(name).replace(regexp, \"+\") + \"=\" + encodeURIComponent(value).replace(regexp, \"+\");\n                pairs.push(pair);\n            }\n            return pairs.join(\"&\");\n        },\n        httpPost: function httpPost(url, params, callback) {\n            var xhr = cc.loader.getXMLHttpRequest();\n\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {\n                    var respone = xhr.responseText;\n                    if (callback) {\n                        callback(respone);\n                    }\n                } else {\n                    if (callback) {\n                        callback(-1);\n                    }\n                }\n            };\n            xhr.open(\"POST\", HTTP.baseURL + url, true);\n            if (HTTP.authorization !== null) {\n                xhr.setRequestHeader(\"authorization\", HTTP.authorization);\n            }\n            if (cc.sys.isNative) {\n                xhr.setRequestHeader(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            // note: In Internet Explorer, the timeout property may be set only after calling the open()\n            // method and before calling the send() method.\n            xhr.timeout = 5000; // 5 seconds for timeout\n\n            xhr.send(HTTP.encodeFormData(params));\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n\ncc._RF.pop();","deps":{}},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\08\\088657d1-aafb-450b-8525-cc8d95776cca.js":{"source":"\"use strict\";\ncc._RF.push(module, '08865fRqvtFC4UlzI2Vd2zK', 'Audio');\n// script/lib/Audio.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        bgVolume: 1.0, // 背景音量\n\n        deskVolume: 1.0, //   房间 房间音量\n\n        bgAudioID: -1 //   背景 音乐  id\n    },\n\n    // use this for initialization\n    init: function init() {\n        var t = cc.sys.localStorage.getItem(\"bgVolume\");\n        if (t != null) {\n            this.bgVolume = parseFloat(t);\n        }\n\n        var t = cc.sys.localStorage.getItem(\"deskVolume\");\n\n        if (t != null) {\n            this.deskVolume = parseFloat(t);\n        }\n\n        cc.game.on(cc.game.EVENT_HIDE, function () {\n            cc.audioEngine.pauseAll();\n        });\n        cc.game.on(cc.game.EVENT_SHOW, function () {\n            cc.audioEngine.resumeAll();\n        });\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n\n    getUrl: function getUrl(url) {\n        return cc.url.raw(\"resources/sounds/\" + url);\n    },\n\n    playBGM: function playBGM(url) {\n        var audioUrl = this.getUrl(url);\n        if (this.bgAudioID >= 0) {\n            cc.audioEngine.stop(this.bgAudioID);\n        }\n        this.bgAudioID = cc.audioEngine.play(audioUrl, true, this.bgVolume);\n    },\n    playSFX: function playSFX(url) {\n        var audioUrl = this.getUrl(url);\n        if (this.sfxVolume > 0) {\n            var audioId = cc.audioEngine.play(audioUrl, false, this.deskVolume);\n        }\n    },\n\n\n    setSFXVolume: function setSFXVolume(v) {\n        if (this.sfxVolume != v) {\n            cc.sys.localStorage.setItem(\"deskVolume\", v);\n            this.deskVolume = v;\n        }\n    },\n\n    setBGMVolume: function setBGMVolume(v, force) {\n        if (this.bgAudioID >= 0) {\n            if (v > 0) {\n                cc.audioEngine.resume(this.bgAudioID);\n            } else {\n                cc.audioEngine.pause(this.bgAudioID);\n            }\n        }\n        if (this.bgVolume != v || force) {\n            cc.sys.localStorage.setItem(\"bgVolume\", v);\n            this.bgmVolume = v;\n            cc.audioEngine.setVolume(this.bgAudioID, v);\n        }\n    },\n\n    pauseAll: function pauseAll() {\n        cc.audioEngine.pauseAll();\n    },\n\n    resumeAll: function resumeAll() {\n        cc.audioEngine.resumeAll();\n    }\n});\n\ncc._RF.pop();","deps":{}},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\c3\\c3362f07-3cd8-4e58-8025-6ae3c744fd20.js":{"source":"(function (global){\n\"use strict\";\ncc._RF.push(module, 'c33628HPNhOWIAlauPHRP0g', 'socket.io');\n// script/lib/socket.io.js\n\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nif (!cc.sys.isNative) {\n  (function (f) {\n    if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }g.io = f();\n    }\n  })(function () {\n    var define, module, exports;return function e(t, n, r) {\n      function s(o, u) {\n        if (!n[o]) {\n          if (!t[o]) {\n            var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n          }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n            var n = t[o][1][e];return s(n ? n : e);\n          }, l, l.exports, e, t, n, r);\n        }return n[o].exports;\n      }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {\n        s(r[o]);\n      }return s;\n    }({ 1: [function (_dereq_, module, exports) {\n\n        module.exports = _dereq_('./lib/');\n      }, { \"./lib/\": 2 }], 2: [function (_dereq_, module, exports) {\n\n        module.exports = _dereq_('./socket');\n\n        /**\n         * Exports parser\n         *\n         * @api public\n         *\n         */\n        module.exports.parser = _dereq_('engine.io-parser');\n      }, { \"./socket\": 3, \"engine.io-parser\": 19 }], 3: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Module dependencies.\n           */\n\n          var transports = _dereq_('./transports');\n          var Emitter = _dereq_('component-emitter');\n          var debug = _dereq_('debug')('engine.io-client:socket');\n          var index = _dereq_('indexof');\n          var parser = _dereq_('engine.io-parser');\n          var parseuri = _dereq_('parseuri');\n          var parsejson = _dereq_('parsejson');\n          var parseqs = _dereq_('parseqs');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = Socket;\n\n          /**\n           * Noop function.\n           *\n           * @api private\n           */\n\n          function noop() {}\n\n          /**\n           * Socket constructor.\n           *\n           * @param {String|Object} uri or options\n           * @param {Object} options\n           * @api public\n           */\n\n          function Socket(uri, opts) {\n            if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n            opts = opts || {};\n\n            if (uri && 'object' == (typeof uri === \"undefined\" ? \"undefined\" : _typeof(uri))) {\n              opts = uri;\n              uri = null;\n            }\n\n            if (uri) {\n              uri = parseuri(uri);\n              opts.hostname = uri.host;\n              opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';\n              opts.port = uri.port;\n              if (uri.query) opts.query = uri.query;\n            } else if (opts.host) {\n              opts.hostname = parseuri(opts.host).host;\n            }\n\n            this.secure = null != opts.secure ? opts.secure : global.location && 'https:' == location.protocol;\n\n            if (opts.hostname && !opts.port) {\n              // if no port is specified manually, use the protocol default\n              opts.port = this.secure ? '443' : '80';\n            }\n\n            this.agent = opts.agent || false;\n            this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');\n            this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);\n            this.query = opts.query || {};\n            if ('string' == typeof this.query) this.query = parseqs.decode(this.query);\n            this.upgrade = false !== opts.upgrade;\n            this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n            this.forceJSONP = !!opts.forceJSONP;\n            this.jsonp = false !== opts.jsonp;\n            this.forceBase64 = !!opts.forceBase64;\n            this.enablesXDR = !!opts.enablesXDR;\n            this.timestampParam = opts.timestampParam || 't';\n            this.timestampRequests = opts.timestampRequests;\n            this.transports = opts.transports || ['polling', 'websocket'];\n            this.readyState = '';\n            this.writeBuffer = [];\n            this.policyPort = opts.policyPort || 843;\n            this.rememberUpgrade = opts.rememberUpgrade || false;\n            this.binaryType = null;\n            this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n            this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;\n\n            if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n            if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n              this.perMessageDeflate.threshold = 1024;\n            }\n\n            // SSL options for Node.js client\n            this.pfx = opts.pfx || null;\n            this.key = opts.key || null;\n            this.passphrase = opts.passphrase || null;\n            this.cert = opts.cert || null;\n            this.ca = opts.ca || null;\n            this.ciphers = opts.ciphers || null;\n            this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n\n            // other options for Node.js client\n            var freeGlobal = (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global;\n            if (freeGlobal.global === freeGlobal) {\n              if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n                this.extraHeaders = opts.extraHeaders;\n              }\n            }\n\n            this.open();\n          }\n\n          Socket.priorWebsocketSuccess = false;\n\n          /**\n           * Mix in `Emitter`.\n           */\n\n          Emitter(Socket.prototype);\n\n          /**\n           * Protocol version.\n           *\n           * @api public\n           */\n\n          Socket.protocol = parser.protocol; // this is an int\n\n          /**\n           * Expose deps for legacy compatibility\n           * and standalone browser access.\n           */\n\n          Socket.Socket = Socket;\n          Socket.Transport = _dereq_('./transport');\n          Socket.transports = _dereq_('./transports');\n          Socket.parser = _dereq_('engine.io-parser');\n\n          /**\n           * Creates transport of the given type.\n           *\n           * @param {String} transport name\n           * @return {Transport}\n           * @api private\n           */\n\n          Socket.prototype.createTransport = function (name) {\n            debug('creating transport \"%s\"', name);\n            var query = clone(this.query);\n\n            // append engine.io protocol identifier\n            query.EIO = parser.protocol;\n\n            // transport name\n            query.transport = name;\n\n            // session id if we already have one\n            if (this.id) query.sid = this.id;\n\n            var transport = new transports[name]({\n              agent: this.agent,\n              hostname: this.hostname,\n              port: this.port,\n              secure: this.secure,\n              path: this.path,\n              query: query,\n              forceJSONP: this.forceJSONP,\n              jsonp: this.jsonp,\n              forceBase64: this.forceBase64,\n              enablesXDR: this.enablesXDR,\n              timestampRequests: this.timestampRequests,\n              timestampParam: this.timestampParam,\n              policyPort: this.policyPort,\n              socket: this,\n              pfx: this.pfx,\n              key: this.key,\n              passphrase: this.passphrase,\n              cert: this.cert,\n              ca: this.ca,\n              ciphers: this.ciphers,\n              rejectUnauthorized: this.rejectUnauthorized,\n              perMessageDeflate: this.perMessageDeflate,\n              extraHeaders: this.extraHeaders\n            });\n\n            return transport;\n          };\n\n          function clone(obj) {\n            var o = {};\n            for (var i in obj) {\n              if (obj.hasOwnProperty(i)) {\n                o[i] = obj[i];\n              }\n            }\n            return o;\n          }\n\n          /**\n           * Initializes transport to use and starts probe.\n           *\n           * @api private\n           */\n          Socket.prototype.open = function () {\n            var transport;\n            if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {\n              transport = 'websocket';\n            } else if (0 === this.transports.length) {\n              // Emit error on next tick so it can be listened to\n              var self = this;\n              setTimeout(function () {\n                self.emit('error', 'No transports available');\n              }, 0);\n              return;\n            } else {\n              transport = this.transports[0];\n            }\n            this.readyState = 'opening';\n\n            // Retry with the next transport if the transport is disabled (jsonp: false)\n            try {\n              transport = this.createTransport(transport);\n            } catch (e) {\n              this.transports.shift();\n              this.open();\n              return;\n            }\n\n            transport.open();\n            this.setTransport(transport);\n          };\n\n          /**\n           * Sets the current transport. Disables the existing one (if any).\n           *\n           * @api private\n           */\n\n          Socket.prototype.setTransport = function (transport) {\n            debug('setting transport %s', transport.name);\n            var self = this;\n\n            if (this.transport) {\n              debug('clearing existing transport %s', this.transport.name);\n              this.transport.removeAllListeners();\n            }\n\n            // set up transport\n            this.transport = transport;\n\n            // set up transport listeners\n            transport.on('drain', function () {\n              self.onDrain();\n            }).on('packet', function (packet) {\n              self.onPacket(packet);\n            }).on('error', function (e) {\n              self.onError(e);\n            }).on('close', function () {\n              self.onClose('transport close');\n            });\n          };\n\n          /**\n           * Probes a transport.\n           *\n           * @param {String} transport name\n           * @api private\n           */\n\n          Socket.prototype.probe = function (name) {\n            debug('probing transport \"%s\"', name);\n            var transport = this.createTransport(name, { probe: 1 }),\n                failed = false,\n                self = this;\n\n            Socket.priorWebsocketSuccess = false;\n\n            function onTransportOpen() {\n              if (self.onlyBinaryUpgrades) {\n                var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n                failed = failed || upgradeLosesBinary;\n              }\n              if (failed) return;\n\n              debug('probe transport \"%s\" opened', name);\n              transport.send([{ type: 'ping', data: 'probe' }]);\n              transport.once('packet', function (msg) {\n                if (failed) return;\n                if ('pong' == msg.type && 'probe' == msg.data) {\n                  debug('probe transport \"%s\" pong', name);\n                  self.upgrading = true;\n                  self.emit('upgrading', transport);\n                  if (!transport) return;\n                  Socket.priorWebsocketSuccess = 'websocket' == transport.name;\n\n                  debug('pausing current transport \"%s\"', self.transport.name);\n                  self.transport.pause(function () {\n                    if (failed) return;\n                    if ('closed' == self.readyState) return;\n                    debug('changing transport and sending upgrade packet');\n\n                    cleanup();\n\n                    self.setTransport(transport);\n                    transport.send([{ type: 'upgrade' }]);\n                    self.emit('upgrade', transport);\n                    transport = null;\n                    self.upgrading = false;\n                    self.flush();\n                  });\n                } else {\n                  debug('probe transport \"%s\" failed', name);\n                  var err = new Error('probe error');\n                  err.transport = transport.name;\n                  self.emit('upgradeError', err);\n                }\n              });\n            }\n\n            function freezeTransport() {\n              if (failed) return;\n\n              // Any callback called by transport should be ignored since now\n              failed = true;\n\n              cleanup();\n\n              transport.close();\n              transport = null;\n            }\n\n            //Handle any error that happens while probing\n            function onerror(err) {\n              var error = new Error('probe error: ' + err);\n              error.transport = transport.name;\n\n              freezeTransport();\n\n              debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n              self.emit('upgradeError', error);\n            }\n\n            function onTransportClose() {\n              onerror(\"transport closed\");\n            }\n\n            //When the socket is closed while we're probing\n            function onclose() {\n              onerror(\"socket closed\");\n            }\n\n            //When the socket is upgraded while we're probing\n            function onupgrade(to) {\n              if (transport && to.name != transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n              }\n            }\n\n            //Remove all listeners on the transport and on self\n            function cleanup() {\n              transport.removeListener('open', onTransportOpen);\n              transport.removeListener('error', onerror);\n              transport.removeListener('close', onTransportClose);\n              self.removeListener('close', onclose);\n              self.removeListener('upgrading', onupgrade);\n            }\n\n            transport.once('open', onTransportOpen);\n            transport.once('error', onerror);\n            transport.once('close', onTransportClose);\n\n            this.once('close', onclose);\n            this.once('upgrading', onupgrade);\n\n            transport.open();\n          };\n\n          /**\n           * Called when connection is deemed open.\n           *\n           * @api public\n           */\n\n          Socket.prototype.onOpen = function () {\n            debug('socket open');\n            this.readyState = 'open';\n            Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;\n            this.emit('open');\n            this.flush();\n\n            // we check for `readyState` in case an `open`\n            // listener already closed the socket\n            if ('open' == this.readyState && this.upgrade && this.transport.pause) {\n              debug('starting upgrade probes');\n              for (var i = 0, l = this.upgrades.length; i < l; i++) {\n                this.probe(this.upgrades[i]);\n              }\n            }\n          };\n\n          /**\n           * Handles a packet.\n           *\n           * @api private\n           */\n\n          Socket.prototype.onPacket = function (packet) {\n            if ('opening' == this.readyState || 'open' == this.readyState) {\n              debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n              this.emit('packet', packet);\n\n              // Socket is live - any packet counts\n              this.emit('heartbeat');\n\n              switch (packet.type) {\n                case 'open':\n                  this.onHandshake(parsejson(packet.data));\n                  break;\n\n                case 'pong':\n                  this.setPing();\n                  this.emit('pong');\n                  break;\n\n                case 'error':\n                  var err = new Error('server error');\n                  err.code = packet.data;\n                  this.onError(err);\n                  break;\n\n                case 'message':\n                  this.emit('data', packet.data);\n                  this.emit('message', packet.data);\n                  break;\n              }\n            } else {\n              debug('packet received with socket readyState \"%s\"', this.readyState);\n            }\n          };\n\n          /**\n           * Called upon handshake completion.\n           *\n           * @param {Object} handshake obj\n           * @api private\n           */\n\n          Socket.prototype.onHandshake = function (data) {\n            this.emit('handshake', data);\n            this.id = data.sid;\n            this.transport.query.sid = data.sid;\n            this.upgrades = this.filterUpgrades(data.upgrades);\n            this.pingInterval = data.pingInterval;\n            this.pingTimeout = data.pingTimeout;\n            this.onOpen();\n            // In case open handler closes socket\n            if ('closed' == this.readyState) return;\n            this.setPing();\n\n            // Prolong liveness of socket on heartbeat\n            this.removeListener('heartbeat', this.onHeartbeat);\n            this.on('heartbeat', this.onHeartbeat);\n          };\n\n          /**\n           * Resets ping timeout.\n           *\n           * @api private\n           */\n\n          Socket.prototype.onHeartbeat = function (timeout) {\n            clearTimeout(this.pingTimeoutTimer);\n            var self = this;\n            self.pingTimeoutTimer = setTimeout(function () {\n              if ('closed' == self.readyState) return;\n              self.onClose('ping timeout');\n            }, timeout || self.pingInterval + self.pingTimeout);\n          };\n\n          /**\n           * Pings server every `this.pingInterval` and expects response\n           * within `this.pingTimeout` or closes connection.\n           *\n           * @api private\n           */\n\n          Socket.prototype.setPing = function () {\n            var self = this;\n            clearTimeout(self.pingIntervalTimer);\n            self.pingIntervalTimer = setTimeout(function () {\n              debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n              self.ping();\n              self.onHeartbeat(self.pingTimeout);\n            }, self.pingInterval);\n          };\n\n          /**\n          * Sends a ping packet.\n          *\n          * @api private\n          */\n\n          Socket.prototype.ping = function () {\n            var self = this;\n            this.sendPacket('ping', function () {\n              self.emit('ping');\n            });\n          };\n\n          /**\n           * Called on `drain` event\n           *\n           * @api private\n           */\n\n          Socket.prototype.onDrain = function () {\n            this.writeBuffer.splice(0, this.prevBufferLen);\n\n            // setting prevBufferLen = 0 is very important\n            // for example, when upgrading, upgrade packet is sent over,\n            // and a nonzero prevBufferLen could cause problems on `drain`\n            this.prevBufferLen = 0;\n\n            if (0 === this.writeBuffer.length) {\n              this.emit('drain');\n            } else {\n              this.flush();\n            }\n          };\n\n          /**\n           * Flush write buffers.\n           *\n           * @api private\n           */\n\n          Socket.prototype.flush = function () {\n            if ('closed' != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n              debug('flushing %d packets in socket', this.writeBuffer.length);\n              this.transport.send(this.writeBuffer);\n              // keep track of current length of writeBuffer\n              // splice writeBuffer and callbackBuffer on `drain`\n              this.prevBufferLen = this.writeBuffer.length;\n              this.emit('flush');\n            }\n          };\n\n          /**\n           * Sends a message.\n           *\n           * @param {String} message.\n           * @param {Function} callback function.\n           * @param {Object} options.\n           * @return {Socket} for chaining.\n           * @api public\n           */\n\n          Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {\n            this.sendPacket('message', msg, options, fn);\n            return this;\n          };\n\n          /**\n           * Sends a packet.\n           *\n           * @param {String} packet type.\n           * @param {String} data.\n           * @param {Object} options.\n           * @param {Function} callback function.\n           * @api private\n           */\n\n          Socket.prototype.sendPacket = function (type, data, options, fn) {\n            if ('function' == typeof data) {\n              fn = data;\n              data = undefined;\n            }\n\n            if ('function' == typeof options) {\n              fn = options;\n              options = null;\n            }\n\n            if ('closing' == this.readyState || 'closed' == this.readyState) {\n              return;\n            }\n\n            options = options || {};\n            options.compress = false !== options.compress;\n\n            var packet = {\n              type: type,\n              data: data,\n              options: options\n            };\n            this.emit('packetCreate', packet);\n            this.writeBuffer.push(packet);\n            if (fn) this.once('flush', fn);\n            this.flush();\n          };\n\n          /**\n           * Closes the connection.\n           *\n           * @api private\n           */\n\n          Socket.prototype.close = function () {\n            if ('opening' == this.readyState || 'open' == this.readyState) {\n              this.readyState = 'closing';\n\n              var self = this;\n\n              if (this.writeBuffer.length) {\n                this.once('drain', function () {\n                  if (this.upgrading) {\n                    waitForUpgrade();\n                  } else {\n                    close();\n                  }\n                });\n              } else if (this.upgrading) {\n                waitForUpgrade();\n              } else {\n                close();\n              }\n            }\n\n            function close() {\n              self.onClose('forced close');\n              debug('socket closing - telling transport to close');\n              self.transport.close();\n            }\n\n            function cleanupAndClose() {\n              self.removeListener('upgrade', cleanupAndClose);\n              self.removeListener('upgradeError', cleanupAndClose);\n              close();\n            }\n\n            function waitForUpgrade() {\n              // wait for upgrade to finish since we can't send packets while pausing a transport\n              self.once('upgrade', cleanupAndClose);\n              self.once('upgradeError', cleanupAndClose);\n            }\n\n            return this;\n          };\n\n          /**\n           * Called upon transport error\n           *\n           * @api private\n           */\n\n          Socket.prototype.onError = function (err) {\n            debug('socket error %j', err);\n            Socket.priorWebsocketSuccess = false;\n            this.emit('error', err);\n            this.onClose('transport error', err);\n          };\n\n          /**\n           * Called upon transport close.\n           *\n           * @api private\n           */\n\n          Socket.prototype.onClose = function (reason, desc) {\n            if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {\n              debug('socket close with reason: \"%s\"', reason);\n              var self = this;\n\n              // clear timers\n              clearTimeout(this.pingIntervalTimer);\n              clearTimeout(this.pingTimeoutTimer);\n\n              // stop event from firing again for transport\n              this.transport.removeAllListeners('close');\n\n              // ensure transport won't stay open\n              this.transport.close();\n\n              // ignore further transport communication\n              this.transport.removeAllListeners();\n\n              // set ready state\n              this.readyState = 'closed';\n\n              // clear session id\n              this.id = null;\n\n              // emit close event\n              this.emit('close', reason, desc);\n\n              // clean buffers after, so users can still\n              // grab the buffers on `close` event\n              self.writeBuffer = [];\n              self.prevBufferLen = 0;\n            }\n          };\n\n          /**\n           * Filters upgrades, returning only those matching client transports.\n           *\n           * @param {Array} server upgrades\n           * @api private\n           *\n           */\n\n          Socket.prototype.filterUpgrades = function (upgrades) {\n            var filteredUpgrades = [];\n            for (var i = 0, j = upgrades.length; i < j; i++) {\n              if (\\x7eindex(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n            }\n            return filteredUpgrades;\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./transport\": 4, \"./transports\": 5, \"component-emitter\": 15, \"debug\": 17, \"engine.io-parser\": 19, \"indexof\": 23, \"parsejson\": 26, \"parseqs\": 27, \"parseuri\": 28 }], 4: [function (_dereq_, module, exports) {\n        /**\n         * Module dependencies.\n         */\n\n        var parser = _dereq_('engine.io-parser');\n        var Emitter = _dereq_('component-emitter');\n\n        /**\n         * Module exports.\n         */\n\n        module.exports = Transport;\n\n        /**\n         * Transport abstract constructor.\n         *\n         * @param {Object} options.\n         * @api private\n         */\n\n        function Transport(opts) {\n          this.path = opts.path;\n          this.hostname = opts.hostname;\n          this.port = opts.port;\n          this.secure = opts.secure;\n          this.query = opts.query;\n          this.timestampParam = opts.timestampParam;\n          this.timestampRequests = opts.timestampRequests;\n          this.readyState = '';\n          this.agent = opts.agent || false;\n          this.socket = opts.socket;\n          this.enablesXDR = opts.enablesXDR;\n\n          // SSL options for Node.js client\n          this.pfx = opts.pfx;\n          this.key = opts.key;\n          this.passphrase = opts.passphrase;\n          this.cert = opts.cert;\n          this.ca = opts.ca;\n          this.ciphers = opts.ciphers;\n          this.rejectUnauthorized = opts.rejectUnauthorized;\n\n          // other options for Node.js client\n          this.extraHeaders = opts.extraHeaders;\n        }\n\n        /**\n         * Mix in `Emitter`.\n         */\n\n        Emitter(Transport.prototype);\n\n        /**\n         * Emits an error.\n         *\n         * @param {String} str\n         * @return {Transport} for chaining\n         * @api public\n         */\n\n        Transport.prototype.onError = function (msg, desc) {\n          var err = new Error(msg);\n          err.type = 'TransportError';\n          err.description = desc;\n          this.emit('error', err);\n          return this;\n        };\n\n        /**\n         * Opens the transport.\n         *\n         * @api public\n         */\n\n        Transport.prototype.open = function () {\n          if ('closed' == this.readyState || '' == this.readyState) {\n            this.readyState = 'opening';\n            this.doOpen();\n          }\n\n          return this;\n        };\n\n        /**\n         * Closes the transport.\n         *\n         * @api private\n         */\n\n        Transport.prototype.close = function () {\n          if ('opening' == this.readyState || 'open' == this.readyState) {\n            this.doClose();\n            this.onClose();\n          }\n\n          return this;\n        };\n\n        /**\n         * Sends multiple packets.\n         *\n         * @param {Array} packets\n         * @api private\n         */\n\n        Transport.prototype.send = function (packets) {\n          if ('open' == this.readyState) {\n            this.write(packets);\n          } else {\n            throw new Error('Transport not open');\n          }\n        };\n\n        /**\n         * Called upon open\n         *\n         * @api private\n         */\n\n        Transport.prototype.onOpen = function () {\n          this.readyState = 'open';\n          this.writable = true;\n          this.emit('open');\n        };\n\n        /**\n         * Called with data.\n         *\n         * @param {String} data\n         * @api private\n         */\n\n        Transport.prototype.onData = function (data) {\n          var packet = parser.decodePacket(data, this.socket.binaryType);\n          this.onPacket(packet);\n        };\n\n        /**\n         * Called with a decoded packet.\n         */\n\n        Transport.prototype.onPacket = function (packet) {\n          this.emit('packet', packet);\n        };\n\n        /**\n         * Called upon close.\n         *\n         * @api private\n         */\n\n        Transport.prototype.onClose = function () {\n          this.readyState = 'closed';\n          this.emit('close');\n        };\n      }, { \"component-emitter\": 15, \"engine.io-parser\": 19 }], 5: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Module dependencies\n           */\n\n          var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\n          var XHR = _dereq_('./polling-xhr');\n          var JSONP = _dereq_('./polling-jsonp');\n          var websocket = _dereq_('./websocket');\n\n          /**\n           * Export transports.\n           */\n\n          exports.polling = polling;\n          exports.websocket = websocket;\n\n          /**\n           * Polling transport polymorphic constructor.\n           * Decides on xhr vs jsonp based on feature detection.\n           *\n           * @api private\n           */\n\n          function polling(opts) {\n            var xhr;\n            var xd = false;\n            var xs = false;\n            var jsonp = false !== opts.jsonp;\n\n            if (global.location) {\n              var isSSL = 'https:' == location.protocol;\n              var port = location.port;\n\n              // some user agents have empty `location.port`\n              if (!port) {\n                port = isSSL ? 443 : 80;\n              }\n\n              xd = opts.hostname != location.hostname || port != opts.port;\n              xs = opts.secure != isSSL;\n            }\n\n            opts.xdomain = xd;\n            opts.xscheme = xs;\n            xhr = new XMLHttpRequest(opts);\n\n            if ('open' in xhr && !opts.forceJSONP) {\n              return new XHR(opts);\n            } else {\n              if (!jsonp) throw new Error('JSONP disabled');\n              return new JSONP(opts);\n            }\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./polling-jsonp\": 6, \"./polling-xhr\": 7, \"./websocket\": 9, \"xmlhttprequest-ssl\": 10 }], 6: [function (_dereq_, module, exports) {\n        (function (global) {\n\n          /**\n           * Module requirements.\n           */\n\n          var Polling = _dereq_('./polling');\n          var inherit = _dereq_('component-inherit');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = JSONPPolling;\n\n          /**\n           * Cached regular expressions.\n           */\n\n          var rNewline = /\\n/g;\n          var rEscapedNewline = /\\\\n/g;\n\n          /**\n           * Global JSONP callbacks.\n           */\n\n          var callbacks;\n\n          /**\n           * Callbacks count.\n           */\n\n          var index = 0;\n\n          /**\n           * Noop.\n           */\n\n          function empty() {}\n\n          /**\n           * JSONP Polling constructor.\n           *\n           * @param {Object} opts.\n           * @api public\n           */\n\n          function JSONPPolling(opts) {\n            Polling.call(this, opts);\n\n            this.query = this.query || {};\n\n            // define global callbacks array if not present\n            // we do this here (lazily) to avoid unneeded global pollution\n            if (!callbacks) {\n              // we need to consider multiple engines in the same page\n              if (!global.___eio) global.___eio = [];\n              callbacks = global.___eio;\n            }\n\n            // callback identifier\n            this.index = callbacks.length;\n\n            // add callback to jsonp global\n            var self = this;\n            callbacks.push(function (msg) {\n              self.onData(msg);\n            });\n\n            // append to query string\n            this.query.j = this.index;\n\n            // prevent spurious errors from being emitted when the window is unloaded\n            if (global.document && global.addEventListener) {\n              global.addEventListener('beforeunload', function () {\n                if (self.script) self.script.onerror = empty;\n              }, false);\n            }\n          }\n\n          /**\n           * Inherits from Polling.\n           */\n\n          inherit(JSONPPolling, Polling);\n\n          /*\n           * JSONP only supports binary as base64 encoded strings\n           */\n\n          JSONPPolling.prototype.supportsBinary = false;\n\n          /**\n           * Closes the socket.\n           *\n           * @api private\n           */\n\n          JSONPPolling.prototype.doClose = function () {\n            if (this.script) {\n              this.script.parentNode.removeChild(this.script);\n              this.script = null;\n            }\n\n            if (this.form) {\n              this.form.parentNode.removeChild(this.form);\n              this.form = null;\n              this.iframe = null;\n            }\n\n            Polling.prototype.doClose.call(this);\n          };\n\n          /**\n           * Starts a poll cycle.\n           *\n           * @api private\n           */\n\n          JSONPPolling.prototype.doPoll = function () {\n            var self = this;\n            var script = document.createElement('script');\n\n            if (this.script) {\n              this.script.parentNode.removeChild(this.script);\n              this.script = null;\n            }\n\n            script.async = true;\n            script.src = this.uri();\n            script.onerror = function (e) {\n              self.onError('jsonp poll error', e);\n            };\n\n            var insertAt = document.getElementsByTagName('script')[0];\n            if (insertAt) {\n              insertAt.parentNode.insertBefore(script, insertAt);\n            } else {\n              (document.head || document.body).appendChild(script);\n            }\n            this.script = script;\n\n            var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);\n\n            if (isUAgecko) {\n              setTimeout(function () {\n                var iframe = document.createElement('iframe');\n                document.body.appendChild(iframe);\n                document.body.removeChild(iframe);\n              }, 100);\n            }\n          };\n\n          /**\n           * Writes with a hidden iframe.\n           *\n           * @param {String} data to send\n           * @param {Function} called upon flush.\n           * @api private\n           */\n\n          JSONPPolling.prototype.doWrite = function (data, fn) {\n            var self = this;\n\n            if (!this.form) {\n              var form = document.createElement('form');\n              var area = document.createElement('textarea');\n              var id = this.iframeId = 'eio_iframe_' + this.index;\n              var iframe;\n\n              form.className = 'socketio';\n              form.style.position = 'absolute';\n              form.style.top = '-1000px';\n              form.style.left = '-1000px';\n              form.target = id;\n              form.method = 'POST';\n              form.setAttribute('accept-charset', 'utf-8');\n              area.name = 'd';\n              form.appendChild(area);\n              document.body.appendChild(form);\n\n              this.form = form;\n              this.area = area;\n            }\n\n            this.form.action = this.uri();\n\n            function complete() {\n              initIframe();\n              fn();\n            }\n\n            function initIframe() {\n              if (self.iframe) {\n                try {\n                  self.form.removeChild(self.iframe);\n                } catch (e) {\n                  self.onError('jsonp polling iframe removal error', e);\n                }\n              }\n\n              try {\n                // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n                var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n                iframe = document.createElement(html);\n              } catch (e) {\n                iframe = document.createElement('iframe');\n                iframe.name = self.iframeId;\n                iframe.src = 'javascript:0';\n              }\n\n              iframe.id = self.iframeId;\n\n              self.form.appendChild(iframe);\n              self.iframe = iframe;\n            }\n\n            initIframe();\n\n            // escape \\n to prevent it from being converted into \\r\\n by some UAs\n            // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n            data = data.replace(rEscapedNewline, '\\\\\\n');\n            this.area.value = data.replace(rNewline, '\\\\n');\n\n            try {\n              this.form.submit();\n            } catch (e) {}\n\n            if (this.iframe.attachEvent) {\n              this.iframe.onreadystatechange = function () {\n                if (self.iframe.readyState == 'complete') {\n                  complete();\n                }\n              };\n            } else {\n              this.iframe.onload = complete;\n            }\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./polling\": 8, \"component-inherit\": 16 }], 7: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Module requirements.\n           */\n\n          var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\n          var Polling = _dereq_('./polling');\n          var Emitter = _dereq_('component-emitter');\n          var inherit = _dereq_('component-inherit');\n          var debug = _dereq_('debug')('engine.io-client:polling-xhr');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = XHR;\n          module.exports.Request = Request;\n\n          /**\n           * Empty function\n           */\n\n          function empty() {}\n\n          /**\n           * XHR Polling constructor.\n           *\n           * @param {Object} opts\n           * @api public\n           */\n\n          function XHR(opts) {\n            Polling.call(this, opts);\n\n            if (global.location) {\n              var isSSL = 'https:' == location.protocol;\n              var port = location.port;\n\n              // some user agents have empty `location.port`\n              if (!port) {\n                port = isSSL ? 443 : 80;\n              }\n\n              this.xd = opts.hostname != global.location.hostname || port != opts.port;\n              this.xs = opts.secure != isSSL;\n            } else {\n              this.extraHeaders = opts.extraHeaders;\n            }\n          }\n\n          /**\n           * Inherits from Polling.\n           */\n\n          inherit(XHR, Polling);\n\n          /**\n           * XHR supports binary\n           */\n\n          XHR.prototype.supportsBinary = true;\n\n          /**\n           * Creates a request.\n           *\n           * @param {String} method\n           * @api private\n           */\n\n          XHR.prototype.request = function (opts) {\n            opts = opts || {};\n            opts.uri = this.uri();\n            opts.xd = this.xd;\n            opts.xs = this.xs;\n            opts.agent = this.agent || false;\n            opts.supportsBinary = this.supportsBinary;\n            opts.enablesXDR = this.enablesXDR;\n\n            // SSL options for Node.js client\n            opts.pfx = this.pfx;\n            opts.key = this.key;\n            opts.passphrase = this.passphrase;\n            opts.cert = this.cert;\n            opts.ca = this.ca;\n            opts.ciphers = this.ciphers;\n            opts.rejectUnauthorized = this.rejectUnauthorized;\n\n            // other options for Node.js client\n            opts.extraHeaders = this.extraHeaders;\n\n            return new Request(opts);\n          };\n\n          /**\n           * Sends data.\n           *\n           * @param {String} data to send.\n           * @param {Function} called upon flush.\n           * @api private\n           */\n\n          XHR.prototype.doWrite = function (data, fn) {\n            var isBinary = typeof data !== 'string' && data !== undefined;\n            var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n            var self = this;\n            req.on('success', fn);\n            req.on('error', function (err) {\n              self.onError('xhr post error', err);\n            });\n            this.sendXhr = req;\n          };\n\n          /**\n           * Starts a poll cycle.\n           *\n           * @api private\n           */\n\n          XHR.prototype.doPoll = function () {\n            debug('xhr poll');\n            var req = this.request();\n            var self = this;\n            req.on('data', function (data) {\n              self.onData(data);\n            });\n            req.on('error', function (err) {\n              self.onError('xhr poll error', err);\n            });\n            this.pollXhr = req;\n          };\n\n          /**\n           * Request constructor\n           *\n           * @param {Object} options\n           * @api public\n           */\n\n          function Request(opts) {\n            this.method = opts.method || 'GET';\n            this.uri = opts.uri;\n            this.xd = !!opts.xd;\n            this.xs = !!opts.xs;\n            this.async = false !== opts.async;\n            this.data = undefined != opts.data ? opts.data : null;\n            this.agent = opts.agent;\n            this.isBinary = opts.isBinary;\n            this.supportsBinary = opts.supportsBinary;\n            this.enablesXDR = opts.enablesXDR;\n\n            // SSL options for Node.js client\n            this.pfx = opts.pfx;\n            this.key = opts.key;\n            this.passphrase = opts.passphrase;\n            this.cert = opts.cert;\n            this.ca = opts.ca;\n            this.ciphers = opts.ciphers;\n            this.rejectUnauthorized = opts.rejectUnauthorized;\n\n            // other options for Node.js client\n            this.extraHeaders = opts.extraHeaders;\n\n            this.create();\n          }\n\n          /**\n           * Mix in `Emitter`.\n           */\n\n          Emitter(Request.prototype);\n\n          /**\n           * Creates the XHR object and sends the request.\n           *\n           * @api private\n           */\n\n          Request.prototype.create = function () {\n            var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n            // SSL options for Node.js client\n            opts.pfx = this.pfx;\n            opts.key = this.key;\n            opts.passphrase = this.passphrase;\n            opts.cert = this.cert;\n            opts.ca = this.ca;\n            opts.ciphers = this.ciphers;\n            opts.rejectUnauthorized = this.rejectUnauthorized;\n\n            var xhr = this.xhr = new XMLHttpRequest(opts);\n            var self = this;\n\n            try {\n              debug('xhr open %s: %s', this.method, this.uri);\n              xhr.open(this.method, this.uri, this.async);\n              try {\n                if (this.extraHeaders) {\n                  xhr.setDisableHeaderCheck(true);\n                  for (var i in this.extraHeaders) {\n                    if (this.extraHeaders.hasOwnProperty(i)) {\n                      xhr.setRequestHeader(i, this.extraHeaders[i]);\n                    }\n                  }\n                }\n              } catch (e) {}\n              if (this.supportsBinary) {\n                // This has to be done after open because Firefox is stupid\n                // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n                xhr.responseType = 'arraybuffer';\n              }\n\n              if ('POST' == this.method) {\n                try {\n                  if (this.isBinary) {\n                    xhr.setRequestHeader('Content-type', 'application/octet-stream');\n                  } else {\n                    xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n                  }\n                } catch (e) {}\n              }\n\n              // ie6 check\n              if ('withCredentials' in xhr) {\n                xhr.withCredentials = true;\n              }\n\n              if (this.hasXDR()) {\n                xhr.onload = function () {\n                  self.onLoad();\n                };\n                xhr.onerror = function () {\n                  self.onError(xhr.responseText);\n                };\n              } else {\n                xhr.onreadystatechange = function () {\n                  if (4 != xhr.readyState) return;\n                  if (200 == xhr.status || 1223 == xhr.status) {\n                    self.onLoad();\n                  } else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    setTimeout(function () {\n                      self.onError(xhr.status);\n                    }, 0);\n                  }\n                };\n              }\n\n              debug('xhr data %s', this.data);\n              xhr.send(this.data);\n            } catch (e) {\n              // Need to defer since .create() is called directly fhrom the constructor\n              // and thus the 'error' event can only be only bound *after* this exception\n              // occurs.  Therefore, also, we cannot throw here at all.\n              setTimeout(function () {\n                self.onError(e);\n              }, 0);\n              return;\n            }\n\n            if (global.document) {\n              this.index = Request.requestsCount++;\n              Request.requests[this.index] = this;\n            }\n          };\n\n          /**\n           * Called upon successful response.\n           *\n           * @api private\n           */\n\n          Request.prototype.onSuccess = function () {\n            this.emit('success');\n            this.cleanup();\n          };\n\n          /**\n           * Called if we have data.\n           *\n           * @api private\n           */\n\n          Request.prototype.onData = function (data) {\n            this.emit('data', data);\n            this.onSuccess();\n          };\n\n          /**\n           * Called upon error.\n           *\n           * @api private\n           */\n\n          Request.prototype.onError = function (err) {\n            this.emit('error', err);\n            this.cleanup(true);\n          };\n\n          /**\n           * Cleans up house.\n           *\n           * @api private\n           */\n\n          Request.prototype.cleanup = function (fromError) {\n            if ('undefined' == typeof this.xhr || null === this.xhr) {\n              return;\n            }\n            // xmlhttprequest\n            if (this.hasXDR()) {\n              this.xhr.onload = this.xhr.onerror = empty;\n            } else {\n              this.xhr.onreadystatechange = empty;\n            }\n\n            if (fromError) {\n              try {\n                this.xhr.abort();\n              } catch (e) {}\n            }\n\n            if (global.document) {\n              delete Request.requests[this.index];\n            }\n\n            this.xhr = null;\n          };\n\n          /**\n           * Called upon load.\n           *\n           * @api private\n           */\n\n          Request.prototype.onLoad = function () {\n            var data;\n            try {\n              var contentType;\n              try {\n                contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n              } catch (e) {}\n              if (contentType === 'application/octet-stream') {\n                data = this.xhr.response;\n              } else {\n                if (!this.supportsBinary) {\n                  data = this.xhr.responseText;\n                } else {\n                  try {\n                    data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n                  } catch (e) {\n                    var ui8Arr = new Uint8Array(this.xhr.response);\n                    var dataArray = [];\n                    for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n                      dataArray.push(ui8Arr[idx]);\n                    }\n\n                    data = String.fromCharCode.apply(null, dataArray);\n                  }\n                }\n              }\n            } catch (e) {\n              this.onError(e);\n            }\n            if (null != data) {\n              this.onData(data);\n            }\n          };\n\n          /**\n           * Check if it has XDomainRequest.\n           *\n           * @api private\n           */\n\n          Request.prototype.hasXDR = function () {\n            return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n          };\n\n          /**\n           * Aborts the request.\n           *\n           * @api public\n           */\n\n          Request.prototype.abort = function () {\n            this.cleanup();\n          };\n\n          /**\n           * Aborts pending requests when unloading the window. This is needed to prevent\n           * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n           * emitted.\n           */\n\n          if (global.document) {\n            Request.requestsCount = 0;\n            Request.requests = {};\n            if (global.attachEvent) {\n              global.attachEvent('onunload', unloadHandler);\n            } else if (global.addEventListener) {\n              global.addEventListener('beforeunload', unloadHandler, false);\n            }\n          }\n\n          function unloadHandler() {\n            for (var i in Request.requests) {\n              if (Request.requests.hasOwnProperty(i)) {\n                Request.requests[i].abort();\n              }\n            }\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./polling\": 8, \"component-emitter\": 15, \"component-inherit\": 16, \"debug\": 17, \"xmlhttprequest-ssl\": 10 }], 8: [function (_dereq_, module, exports) {\n        /**\n         * Module dependencies.\n         */\n\n        var Transport = _dereq_('../transport');\n        var parseqs = _dereq_('parseqs');\n        var parser = _dereq_('engine.io-parser');\n        var inherit = _dereq_('component-inherit');\n        var yeast = _dereq_('yeast');\n        var debug = _dereq_('debug')('engine.io-client:polling');\n\n        /**\n         * Module exports.\n         */\n\n        module.exports = Polling;\n\n        /**\n         * Is XHR2 supported?\n         */\n\n        var hasXHR2 = function () {\n          var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\n          var xhr = new XMLHttpRequest({ xdomain: false });\n          return null != xhr.responseType;\n        }();\n\n        /**\n         * Polling interface.\n         *\n         * @param {Object} opts\n         * @api private\n         */\n\n        function Polling(opts) {\n          var forceBase64 = opts && opts.forceBase64;\n          if (!hasXHR2 || forceBase64) {\n            this.supportsBinary = false;\n          }\n          Transport.call(this, opts);\n        }\n\n        /**\n         * Inherits from Transport.\n         */\n\n        inherit(Polling, Transport);\n\n        /**\n         * Transport name.\n         */\n\n        Polling.prototype.name = 'polling';\n\n        /**\n         * Opens the socket (triggers polling). We write a PING message to determine\n         * when the transport is open.\n         *\n         * @api private\n         */\n\n        Polling.prototype.doOpen = function () {\n          this.poll();\n        };\n\n        /**\n         * Pauses polling.\n         *\n         * @param {Function} callback upon buffers are flushed and transport is paused\n         * @api private\n         */\n\n        Polling.prototype.pause = function (onPause) {\n          var pending = 0;\n          var self = this;\n\n          this.readyState = 'pausing';\n\n          function pause() {\n            debug('paused');\n            self.readyState = 'paused';\n            onPause();\n          }\n\n          if (this.polling || !this.writable) {\n            var total = 0;\n\n            if (this.polling) {\n              debug('we are currently polling - waiting to pause');\n              total++;\n              this.once('pollComplete', function () {\n                debug('pre-pause polling complete');\n                --total || pause();\n              });\n            }\n\n            if (!this.writable) {\n              debug('we are currently writing - waiting to pause');\n              total++;\n              this.once('drain', function () {\n                debug('pre-pause writing complete');\n                --total || pause();\n              });\n            }\n          } else {\n            pause();\n          }\n        };\n\n        /**\n         * Starts polling cycle.\n         *\n         * @api public\n         */\n\n        Polling.prototype.poll = function () {\n          debug('polling');\n          this.polling = true;\n          this.doPoll();\n          this.emit('poll');\n        };\n\n        /**\n         * Overloads onData to detect payloads.\n         *\n         * @api private\n         */\n\n        Polling.prototype.onData = function (data) {\n          var self = this;\n          debug('polling got data %s', data);\n          var callback = function callback(packet, index, total) {\n            // if its the first message we consider the transport open\n            if ('opening' == self.readyState) {\n              self.onOpen();\n            }\n\n            // if its a close packet, we close the ongoing requests\n            if ('close' == packet.type) {\n              self.onClose();\n              return false;\n            }\n\n            // otherwise bypass onData and handle the message\n            self.onPacket(packet);\n          };\n\n          // decode payload\n          parser.decodePayload(data, this.socket.binaryType, callback);\n\n          // if an event did not trigger closing\n          if ('closed' != this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emit('pollComplete');\n\n            if ('open' == this.readyState) {\n              this.poll();\n            } else {\n              debug('ignoring poll - transport state \"%s\"', this.readyState);\n            }\n          }\n        };\n\n        /**\n         * For polling, send a close packet.\n         *\n         * @api private\n         */\n\n        Polling.prototype.doClose = function () {\n          var self = this;\n\n          function close() {\n            debug('writing close packet');\n            self.write([{ type: 'close' }]);\n          }\n\n          if ('open' == this.readyState) {\n            debug('transport open - closing');\n            close();\n          } else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            debug('transport not open - deferring close');\n            this.once('open', close);\n          }\n        };\n\n        /**\n         * Writes a packets payload.\n         *\n         * @param {Array} data packets\n         * @param {Function} drain callback\n         * @api private\n         */\n\n        Polling.prototype.write = function (packets) {\n          var self = this;\n          this.writable = false;\n          var callbackfn = function callbackfn() {\n            self.writable = true;\n            self.emit('drain');\n          };\n\n          var self = this;\n          parser.encodePayload(packets, this.supportsBinary, function (data) {\n            self.doWrite(data, callbackfn);\n          });\n        };\n\n        /**\n         * Generates uri for connection.\n         *\n         * @api private\n         */\n\n        Polling.prototype.uri = function () {\n          var query = this.query || {};\n          var schema = this.secure ? 'https' : 'http';\n          var port = '';\n\n          // cache busting is forced\n          if (false !== this.timestampRequests) {\n            query[this.timestampParam] = yeast();\n          }\n\n          if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n          }\n\n          query = parseqs.encode(query);\n\n          // avoid port if default for schema\n          if (this.port && ('https' == schema && this.port != 443 || 'http' == schema && this.port != 80)) {\n            port = ':' + this.port;\n          }\n\n          // prepend ? to query\n          if (query.length) {\n            query = '?' + query;\n          }\n\n          var ipv6 = this.hostname.indexOf(':') !== -1;\n          return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n        };\n      }, { \"../transport\": 4, \"component-inherit\": 16, \"debug\": 17, \"engine.io-parser\": 19, \"parseqs\": 27, \"xmlhttprequest-ssl\": 10, \"yeast\": 30 }], 9: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Module dependencies.\n           */\n\n          var Transport = _dereq_('../transport');\n          var parser = _dereq_('engine.io-parser');\n          var parseqs = _dereq_('parseqs');\n          var inherit = _dereq_('component-inherit');\n          var yeast = _dereq_('yeast');\n          var debug = _dereq_('debug')('engine.io-client:websocket');\n          var BrowserWebSocket = global.WebSocket || global.MozWebSocket;\n\n          /**\n           * Get either the `WebSocket` or `MozWebSocket` globals\n           * in the browser or the WebSocket-compatible interface\n           * exposed by `ws` for Node environment.\n           */\n\n          var WebSocket = BrowserWebSocket || (typeof window !== 'undefined' ? null : _dereq_('ws'));\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = WS;\n\n          /**\n           * WebSocket transport constructor.\n           *\n           * @api {Object} connection options\n           * @api public\n           */\n\n          function WS(opts) {\n            var forceBase64 = opts && opts.forceBase64;\n            if (forceBase64) {\n              this.supportsBinary = false;\n            }\n            this.perMessageDeflate = opts.perMessageDeflate;\n            Transport.call(this, opts);\n          }\n\n          /**\n           * Inherits from Transport.\n           */\n\n          inherit(WS, Transport);\n\n          /**\n           * Transport name.\n           *\n           * @api public\n           */\n\n          WS.prototype.name = 'websocket';\n\n          /*\n           * WebSockets support binary\n           */\n\n          WS.prototype.supportsBinary = true;\n\n          /**\n           * Opens socket.\n           *\n           * @api private\n           */\n\n          WS.prototype.doOpen = function () {\n            if (!this.check()) {\n              // let probe timeout\n              return;\n            }\n\n            var self = this;\n            var uri = this.uri();\n            var protocols = void 0;\n            var opts = {\n              agent: this.agent,\n              perMessageDeflate: this.perMessageDeflate\n            };\n\n            // SSL options for Node.js client\n            opts.pfx = this.pfx;\n            opts.key = this.key;\n            opts.passphrase = this.passphrase;\n            opts.cert = this.cert;\n            opts.ca = this.ca;\n            opts.ciphers = this.ciphers;\n            opts.rejectUnauthorized = this.rejectUnauthorized;\n            if (this.extraHeaders) {\n              opts.headers = this.extraHeaders;\n            }\n\n            this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n\n            if (this.ws.binaryType === undefined) {\n              this.supportsBinary = false;\n            }\n\n            if (this.ws.supports && this.ws.supports.binary) {\n              this.supportsBinary = true;\n              this.ws.binaryType = 'buffer';\n            } else {\n              this.ws.binaryType = 'arraybuffer';\n            }\n\n            this.addEventListeners();\n          };\n\n          /**\n           * Adds event listeners to the socket\n           *\n           * @api private\n           */\n\n          WS.prototype.addEventListeners = function () {\n            var self = this;\n\n            this.ws.onopen = function () {\n              self.onOpen();\n            };\n            this.ws.onclose = function () {\n              self.onClose();\n            };\n            this.ws.onmessage = function (ev) {\n              self.onData(ev.data);\n            };\n            this.ws.onerror = function (e) {\n              self.onError('websocket error', e);\n            };\n          };\n\n          /**\n           * Override `onData` to use a timer on iOS.\n           * See: https://gist.github.com/mloughran/2052006\n           *\n           * @api private\n           */\n\n          if ('undefined' != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {\n            WS.prototype.onData = function (data) {\n              var self = this;\n              setTimeout(function () {\n                Transport.prototype.onData.call(self, data);\n              }, 0);\n            };\n          }\n\n          /**\n           * Writes data to socket.\n           *\n           * @param {Array} array of packets.\n           * @api private\n           */\n\n          WS.prototype.write = function (packets) {\n            var self = this;\n            this.writable = false;\n\n            // encodePacket efficient as it uses WS framing\n            // no need for encodePayload\n            var total = packets.length;\n            for (var i = 0, l = total; i < l; i++) {\n              (function (packet) {\n                parser.encodePacket(packet, self.supportsBinary, function (data) {\n                  if (!BrowserWebSocket) {\n                    // always create a new object (GH-437)\n                    var opts = {};\n                    if (packet.options) {\n                      opts.compress = packet.options.compress;\n                    }\n\n                    if (self.perMessageDeflate) {\n                      var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;\n                      if (len < self.perMessageDeflate.threshold) {\n                        opts.compress = false;\n                      }\n                    }\n                  }\n\n                  //Sometimes the websocket has already been closed but the browser didn't\n                  //have a chance of informing us about it yet, in that case send will\n                  //throw an error\n                  try {\n                    if (BrowserWebSocket) {\n                      // TypeError is thrown when passing the second argument on Safari\n                      self.ws.send(data);\n                    } else {\n                      self.ws.send(data, opts);\n                    }\n                  } catch (e) {\n                    debug('websocket closed before onclose event');\n                  }\n\n                  --total || done();\n                });\n              })(packets[i]);\n            }\n\n            function done() {\n              self.emit('flush');\n\n              // fake drain\n              // defer to next tick to allow Socket to clear writeBuffer\n              setTimeout(function () {\n                self.writable = true;\n                self.emit('drain');\n              }, 0);\n            }\n          };\n\n          /**\n           * Called upon close\n           *\n           * @api private\n           */\n\n          WS.prototype.onClose = function () {\n            Transport.prototype.onClose.call(this);\n          };\n\n          /**\n           * Closes socket.\n           *\n           * @api private\n           */\n\n          WS.prototype.doClose = function () {\n            if (typeof this.ws !== 'undefined') {\n              this.ws.close();\n            }\n          };\n\n          /**\n           * Generates uri for connection.\n           *\n           * @api private\n           */\n\n          WS.prototype.uri = function () {\n            var query = this.query || {};\n            var schema = this.secure ? 'wss' : 'ws';\n            var port = '';\n\n            // avoid port if default for schema\n            if (this.port && ('wss' == schema && this.port != 443 || 'ws' == schema && this.port != 80)) {\n              port = ':' + this.port;\n            }\n\n            // append timestamp to URI\n            if (this.timestampRequests) {\n              query[this.timestampParam] = yeast();\n            }\n\n            // communicate binary support capabilities\n            if (!this.supportsBinary) {\n              query.b64 = 1;\n            }\n\n            query = parseqs.encode(query);\n\n            // prepend ? to query\n            if (query.length) {\n              query = '?' + query;\n            }\n\n            var ipv6 = this.hostname.indexOf(':') !== -1;\n            return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n          };\n\n          /**\n           * Feature detection for WebSocket.\n           *\n           * @return {Boolean} whether this transport is available.\n           * @api public\n           */\n\n          WS.prototype.check = function () {\n            return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"../transport\": 4, \"component-inherit\": 16, \"debug\": 17, \"engine.io-parser\": 19, \"parseqs\": 27, \"ws\": undefined, \"yeast\": 30 }], 10: [function (_dereq_, module, exports) {\n        // browser shim for xmlhttprequest module\n        var hasCORS = _dereq_('has-cors');\n\n        module.exports = function (opts) {\n          var xdomain = opts.xdomain;\n\n          // scheme must be same when usign XDomainRequest\n          // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n          var xscheme = opts.xscheme;\n\n          // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n          // https://github.com/Automattic/engine.io-client/pull/217\n          var enablesXDR = opts.enablesXDR;\n\n          // XMLHttpRequest can be disabled on IE\n          try {\n            if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n              return new XMLHttpRequest();\n            }\n          } catch (e) {}\n\n          // Use XDomainRequest for IE8 if enablesXDR is true\n          // because loading bar keeps flashing when using jsonp-polling\n          // https://github.com/yujiosaka/socke.io-ie8-loading-example\n          try {\n            if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {\n              return new XDomainRequest();\n            }\n          } catch (e) {}\n\n          if (!xdomain) {\n            try {\n              return new ActiveXObject('Microsoft.XMLHTTP');\n            } catch (e) {}\n          }\n        };\n      }, { \"has-cors\": 22 }], 11: [function (_dereq_, module, exports) {\n        module.exports = after;\n\n        function after(count, callback, err_cb) {\n          var bail = false;\n          err_cb = err_cb || noop;\n          proxy.count = count;\n\n          return count === 0 ? callback() : proxy;\n\n          function proxy(err, result) {\n            if (proxy.count <= 0) {\n              throw new Error('after called too many times');\n            }\n            --proxy.count;\n\n            // after first error, rest are passed to err_cb\n            if (err) {\n              bail = true;\n              callback(err);\n              // future error callbacks will go to error handler\n              callback = err_cb;\n            } else if (proxy.count === 0 && !bail) {\n              callback(null, result);\n            }\n          }\n        }\n\n        function noop() {}\n      }, {}], 12: [function (_dereq_, module, exports) {\n        /**\n         * An abstraction for slicing an arraybuffer even when\n         * ArrayBuffer.prototype.slice is not supported\n         *\n         * @api public\n         */\n\n        module.exports = function (arraybuffer, start, end) {\n          var bytes = arraybuffer.byteLength;\n          start = start || 0;\n          end = end || bytes;\n\n          if (arraybuffer.slice) {\n            return arraybuffer.slice(start, end);\n          }\n\n          if (start < 0) {\n            start += bytes;\n          }\n          if (end < 0) {\n            end += bytes;\n          }\n          if (end > bytes) {\n            end = bytes;\n          }\n\n          if (start >= bytes || start >= end || bytes === 0) {\n            return new ArrayBuffer(0);\n          }\n\n          var abv = new Uint8Array(arraybuffer);\n          var result = new Uint8Array(end - start);\n          for (var i = start, ii = 0; i < end; i++, ii++) {\n            result[ii] = abv[i];\n          }\n          return result.buffer;\n        };\n      }, {}], 13: [function (_dereq_, module, exports) {\n        /*\n         * base64-arraybuffer\n         * https://github.com/niklasvh/base64-arraybuffer\n         *\n         * Copyright (c) 2012 Niklas von Hertzen\n         * Licensed under the MIT license.\n         */\n        (function (chars) {\n          \"use strict\";\n\n          exports.encode = function (arraybuffer) {\n            var bytes = new Uint8Array(arraybuffer),\n                i,\n                len = bytes.length,\n                base64 = \"\";\n\n            for (i = 0; i < len; i += 3) {\n              base64 += chars[bytes[i] >> 2];\n              base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n              base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n              base64 += chars[bytes[i + 2] & 63];\n            }\n\n            if (len % 3 === 2) {\n              base64 = base64.substring(0, base64.length - 1) + \"=\";\n            } else if (len % 3 === 1) {\n              base64 = base64.substring(0, base64.length - 2) + \"==\";\n            }\n\n            return base64;\n          };\n\n          exports.decode = function (base64) {\n            var bufferLength = base64.length * 0.75,\n                len = base64.length,\n                i,\n                p = 0,\n                encoded1,\n                encoded2,\n                encoded3,\n                encoded4;\n\n            if (base64[base64.length - 1] === \"=\") {\n              bufferLength--;\n              if (base64[base64.length - 2] === \"=\") {\n                bufferLength--;\n              }\n            }\n\n            var arraybuffer = new ArrayBuffer(bufferLength),\n                bytes = new Uint8Array(arraybuffer);\n\n            for (i = 0; i < len; i += 4) {\n              encoded1 = chars.indexOf(base64[i]);\n              encoded2 = chars.indexOf(base64[i + 1]);\n              encoded3 = chars.indexOf(base64[i + 2]);\n              encoded4 = chars.indexOf(base64[i + 3]);\n\n              bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n              bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n              bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n            }\n\n            return arraybuffer;\n          };\n        })(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n      }, {}], 14: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Create a blob builder even when vendor prefixes exist\n           */\n\n          var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;\n\n          /**\n           * Check if Blob constructor is supported\n           */\n\n          var blobSupported = function () {\n            try {\n              var a = new Blob(['hi']);\n              return a.size === 2;\n            } catch (e) {\n              return false;\n            }\n          }();\n\n          /**\n           * Check if Blob constructor supports ArrayBufferViews\n           * Fails in Safari 6, so we need to map to ArrayBuffers there.\n           */\n\n          var blobSupportsArrayBufferView = blobSupported && function () {\n            try {\n              var b = new Blob([new Uint8Array([1, 2])]);\n              return b.size === 2;\n            } catch (e) {\n              return false;\n            }\n          }();\n\n          /**\n           * Check if BlobBuilder is supported\n           */\n\n          var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;\n\n          /**\n           * Helper function that maps ArrayBufferViews to ArrayBuffers\n           * Used by BlobBuilder constructor and old browsers that didn't\n           * support it in the Blob constructor.\n           */\n\n          function mapArrayBufferViews(ary) {\n            for (var i = 0; i < ary.length; i++) {\n              var chunk = ary[i];\n              if (chunk.buffer instanceof ArrayBuffer) {\n                var buf = chunk.buffer;\n\n                // if this is a subarray, make a copy so we only\n                // include the subarray region from the underlying buffer\n                if (chunk.byteLength !== buf.byteLength) {\n                  var copy = new Uint8Array(chunk.byteLength);\n                  copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n                  buf = copy.buffer;\n                }\n\n                ary[i] = buf;\n              }\n            }\n          }\n\n          function BlobBuilderConstructor(ary, options) {\n            options = options || {};\n\n            var bb = new BlobBuilder();\n            mapArrayBufferViews(ary);\n\n            for (var i = 0; i < ary.length; i++) {\n              bb.append(ary[i]);\n            }\n\n            return options.type ? bb.getBlob(options.type) : bb.getBlob();\n          };\n\n          function BlobConstructor(ary, options) {\n            mapArrayBufferViews(ary);\n            return new Blob(ary, options || {});\n          };\n\n          module.exports = function () {\n            if (blobSupported) {\n              return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n            } else if (blobBuilderSupported) {\n              return BlobBuilderConstructor;\n            } else {\n              return undefined;\n            }\n          }();\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, {}], 15: [function (_dereq_, module, exports) {\n\n        /**\n         * Expose `Emitter`.\n         */\n\n        module.exports = Emitter;\n\n        /**\n         * Initialize a new `Emitter`.\n         *\n         * @api public\n         */\n\n        function Emitter(obj) {\n          if (obj) return mixin(obj);\n        };\n\n        /**\n         * Mixin the emitter properties.\n         *\n         * @param {Object} obj\n         * @return {Object}\n         * @api private\n         */\n\n        function mixin(obj) {\n          for (var key in Emitter.prototype) {\n            obj[key] = Emitter.prototype[key];\n          }\n          return obj;\n        }\n\n        /**\n         * Listen on the given `event` with `fn`.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {};\n          (this._callbacks[event] = this._callbacks[event] || []).push(fn);\n          return this;\n        };\n\n        /**\n         * Adds an `event` listener that will be invoked a single\n         * time then automatically removed.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.once = function (event, fn) {\n          var self = this;\n          this._callbacks = this._callbacks || {};\n\n          function on() {\n            self.off(event, on);\n            fn.apply(this, arguments);\n          }\n\n          on.fn = fn;\n          this.on(event, on);\n          return this;\n        };\n\n        /**\n         * Remove the given callback for `event` or all\n         * registered callbacks.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {};\n\n          // all\n          if (0 == arguments.length) {\n            this._callbacks = {};\n            return this;\n          }\n\n          // specific event\n          var callbacks = this._callbacks[event];\n          if (!callbacks) return this;\n\n          // remove all handlers\n          if (1 == arguments.length) {\n            delete this._callbacks[event];\n            return this;\n          }\n\n          // remove specific handler\n          var cb;\n          for (var i = 0; i < callbacks.length; i++) {\n            cb = callbacks[i];\n            if (cb === fn || cb.fn === fn) {\n              callbacks.splice(i, 1);\n              break;\n            }\n          }\n          return this;\n        };\n\n        /**\n         * Emit `event` with the given args.\n         *\n         * @param {String} event\n         * @param {Mixed} ...\n         * @return {Emitter}\n         */\n\n        Emitter.prototype.emit = function (event) {\n          this._callbacks = this._callbacks || {};\n          var args = [].slice.call(arguments, 1),\n              callbacks = this._callbacks[event];\n\n          if (callbacks) {\n            callbacks = callbacks.slice(0);\n            for (var i = 0, len = callbacks.length; i < len; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n\n          return this;\n        };\n\n        /**\n         * Return array of callbacks for `event`.\n         *\n         * @param {String} event\n         * @return {Array}\n         * @api public\n         */\n\n        Emitter.prototype.listeners = function (event) {\n          this._callbacks = this._callbacks || {};\n          return this._callbacks[event] || [];\n        };\n\n        /**\n         * Check if this emitter has `event` handlers.\n         *\n         * @param {String} event\n         * @return {Boolean}\n         * @api public\n         */\n\n        Emitter.prototype.hasListeners = function (event) {\n          return !!this.listeners(event).length;\n        };\n      }, {}], 16: [function (_dereq_, module, exports) {\n\n        module.exports = function (a, b) {\n          var fn = function fn() {};\n          fn.prototype = b.prototype;\n          a.prototype = new fn();\n          a.prototype.constructor = a;\n        };\n      }, {}], 17: [function (_dereq_, module, exports) {\n\n        /**\n         * This is the web browser implementation of `debug()`.\n         *\n         * Expose `debug()` as the module.\n         */\n\n        exports = module.exports = _dereq_('./debug');\n        exports.log = log;\n        exports.formatArgs = formatArgs;\n        exports.save = save;\n        exports.load = load;\n        exports.useColors = useColors;\n        exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\n\n        /**\n         * Colors.\n         */\n\n        exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n\n        /**\n         * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n         * and the Firebug extension (any Firefox version) are known\n         * to support \"%c\" CSS customizations.\n         *\n         * TODO: add a `localStorage` variable to explicitly enable/disable colors\n         */\n\n        function useColors() {\n          // is webkit? http://stackoverflow.com/a/16459606/376773\n          return 'WebkitAppearance' in document.documentElement.style ||\n          // is firebug? http://stackoverflow.com/a/398120/376773\n          window.console && (console.firebug || console.exception && console.table) ||\n          // is firefox >= v31?\n          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n          navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31;\n        }\n\n        /**\n         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n         */\n\n        exports.formatters.j = function (v) {\n          return JSON.stringify(v);\n        };\n\n        /**\n         * Colorize log arguments if enabled.\n         *\n         * @api public\n         */\n\n        function formatArgs() {\n          var args = arguments;\n          var useColors = this.useColors;\n\n          args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);\n\n          if (!useColors) return args;\n\n          var c = 'color: ' + this.color;\n          args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n          // the final \"%c\" is somewhat tricky, because there could be other\n          // arguments passed either before or after the %c, so we need to\n          // figure out the correct index to insert the CSS into\n          var index = 0;\n          var lastC = 0;\n          args[0].replace(/%[a-z%]/g, function (match) {\n            if ('%%' === match) return;\n            index++;\n            if ('%c' === match) {\n              // we only are interested in the *last* %c\n              // (the user may have provided their own)\n              lastC = index;\n            }\n          });\n\n          args.splice(lastC, 0, c);\n          return args;\n        }\n\n        /**\n         * Invokes `console.log()` when available.\n         * No-op when `console.log` is not a \"function\".\n         *\n         * @api public\n         */\n\n        function log() {\n          // this hackery is required for IE8/9, where\n          // the `console.log` function doesn't have 'apply'\n          return 'object' === (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);\n        }\n\n        /**\n         * Save `namespaces`.\n         *\n         * @param {String} namespaces\n         * @api private\n         */\n\n        function save(namespaces) {\n          try {\n            if (null == namespaces) {\n              exports.storage.removeItem('debug');\n            } else {\n              exports.storage.debug = namespaces;\n            }\n          } catch (e) {}\n        }\n\n        /**\n         * Load `namespaces`.\n         *\n         * @return {String} returns the previously persisted debug modes\n         * @api private\n         */\n\n        function load() {\n          var r;\n          try {\n            r = exports.storage.debug;\n          } catch (e) {}\n          return r;\n        }\n\n        /**\n         * Enable namespaces listed in `localStorage.debug` initially.\n         */\n\n        exports.enable(load());\n\n        /**\n         * Localstorage attempts to return the localstorage.\n         *\n         * This is necessary because safari throws\n         * when a user disables cookies/localstorage\n         * and you attempt to access it.\n         *\n         * @return {LocalStorage}\n         * @api private\n         */\n\n        function localstorage() {\n          try {\n            return window.localStorage;\n          } catch (e) {}\n        }\n      }, { \"./debug\": 18 }], 18: [function (_dereq_, module, exports) {\n\n        /**\n         * This is the common logic for both the Node.js and web browser\n         * implementations of `debug()`.\n         *\n         * Expose `debug()` as the module.\n         */\n\n        exports = module.exports = debug;\n        exports.coerce = coerce;\n        exports.disable = disable;\n        exports.enable = enable;\n        exports.enabled = enabled;\n        exports.humanize = _dereq_('ms');\n\n        /**\n         * The currently active debug mode names, and names to skip.\n         */\n\n        exports.names = [];\n        exports.skips = [];\n\n        /**\n         * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n         *\n         * Valid key names are a single, lowercased letter, i.e. \"n\".\n         */\n\n        exports.formatters = {};\n\n        /**\n         * Previously assigned color.\n         */\n\n        var prevColor = 0;\n\n        /**\n         * Previous log timestamp.\n         */\n\n        var prevTime;\n\n        /**\n         * Select a color.\n         *\n         * @return {Number}\n         * @api private\n         */\n\n        function selectColor() {\n          return exports.colors[prevColor++ % exports.colors.length];\n        }\n\n        /**\n         * Create a debugger with the given `namespace`.\n         *\n         * @param {String} namespace\n         * @return {Function}\n         * @api public\n         */\n\n        function debug(namespace) {\n\n          // define the `disabled` version\n          function disabled() {}\n          disabled.enabled = false;\n\n          // define the `enabled` version\n          function enabled() {\n\n            var self = enabled;\n\n            // set `diff` timestamp\n            var curr = +new Date();\n            var ms = curr - (prevTime || curr);\n            self.diff = ms;\n            self.prev = prevTime;\n            self.curr = curr;\n            prevTime = curr;\n\n            // add the `color` if not set\n            if (null == self.useColors) self.useColors = exports.useColors();\n            if (null == self.color && self.useColors) self.color = selectColor();\n\n            var args = Array.prototype.slice.call(arguments);\n\n            args[0] = exports.coerce(args[0]);\n\n            if ('string' !== typeof args[0]) {\n              // anything else let's inspect with %o\n              args = ['%o'].concat(args);\n            }\n\n            // apply any `formatters` transformations\n            var index = 0;\n            args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {\n              // if we encounter an escaped % then don't increase the array index\n              if (match === '%%') return match;\n              index++;\n              var formatter = exports.formatters[format];\n              if ('function' === typeof formatter) {\n                var val = args[index];\n                match = formatter.call(self, val);\n\n                // now we need to remove `args[index]` since it's inlined in the `format`\n                args.splice(index, 1);\n                index--;\n              }\n              return match;\n            });\n\n            if ('function' === typeof exports.formatArgs) {\n              args = exports.formatArgs.apply(self, args);\n            }\n            var logFn = enabled.log || exports.log || console.log.bind(console);\n            logFn.apply(self, args);\n          }\n          enabled.enabled = true;\n\n          var fn = exports.enabled(namespace) ? enabled : disabled;\n\n          fn.namespace = namespace;\n\n          return fn;\n        }\n\n        /**\n         * Enables a debug mode by namespaces. This can include modes\n         * separated by a colon and wildcards.\n         *\n         * @param {String} namespaces\n         * @api public\n         */\n\n        function enable(namespaces) {\n          exports.save(namespaces);\n\n          var split = (namespaces || '').split(/[\\s,]+/);\n          var len = split.length;\n\n          for (var i = 0; i < len; i++) {\n            if (!split[i]) continue; // ignore empty strings\n            namespaces = split[i].replace(/\\*/g, '.*?');\n            if (namespaces[0] === '-') {\n              exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n            } else {\n              exports.names.push(new RegExp('^' + namespaces + '$'));\n            }\n          }\n        }\n\n        /**\n         * Disable debug output.\n         *\n         * @api public\n         */\n\n        function disable() {\n          exports.enable('');\n        }\n\n        /**\n         * Returns true if the given mode name is enabled, false otherwise.\n         *\n         * @param {String} name\n         * @return {Boolean}\n         * @api public\n         */\n\n        function enabled(name) {\n          var i, len;\n          for (i = 0, len = exports.skips.length; i < len; i++) {\n            if (exports.skips[i].test(name)) {\n              return false;\n            }\n          }\n          for (i = 0, len = exports.names.length; i < len; i++) {\n            if (exports.names[i].test(name)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        /**\n         * Coerce `val`.\n         *\n         * @param {Mixed} val\n         * @return {Mixed}\n         * @api private\n         */\n\n        function coerce(val) {\n          if (val instanceof Error) return val.stack || val.message;\n          return val;\n        }\n      }, { \"ms\": 25 }], 19: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * Module dependencies.\n           */\n\n          var keys = _dereq_('./keys');\n          var hasBinary = _dereq_('has-binary');\n          var sliceBuffer = _dereq_('arraybuffer.slice');\n          var base64encoder = _dereq_('base64-arraybuffer');\n          var after = _dereq_('after');\n          var utf8 = _dereq_('utf8');\n\n          /**\n           * Check if we are running an android browser. That requires us to use\n           * ArrayBuffer with polling transports...\n           *\n           * http://ghinda.net/jpeg-blob-ajax-android/\n           */\n\n          var isAndroid = navigator.userAgent.match(/Android/i);\n\n          /**\n           * Check if we are running in PhantomJS.\n           * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n           * https://github.com/ariya/phantomjs/issues/11395\n           * @type boolean\n           */\n          var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n\n          /**\n           * When true, avoids using Blobs to encode payloads.\n           * @type boolean\n           */\n          var dontSendBlobs = isAndroid || isPhantomJS;\n\n          /**\n           * Current protocol version.\n           */\n\n          exports.protocol = 3;\n\n          /**\n           * Packet types.\n           */\n\n          var packets = exports.packets = {\n            open: 0 // non-ws\n            , close: 1 // non-ws\n            , ping: 2,\n            pong: 3,\n            message: 4,\n            upgrade: 5,\n            noop: 6\n          };\n\n          var packetslist = keys(packets);\n\n          /**\n           * Premade error packet.\n           */\n\n          var err = { type: 'error', data: 'parser error' };\n\n          /**\n           * Create a blob api even for blob builder when vendor prefixes exist\n           */\n\n          var Blob = _dereq_('blob');\n\n          /**\n           * Encodes a packet.\n           *\n           *     <packet type id> [ <data> ]\n           *\n           * Example:\n           *\n           *     5hello world\n           *     3\n           *     4\n           *\n           * Binary is encoded in an identical principle\n           *\n           * @api private\n           */\n\n          exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n            if ('function' == typeof supportsBinary) {\n              callback = supportsBinary;\n              supportsBinary = false;\n            }\n\n            if ('function' == typeof utf8encode) {\n              callback = utf8encode;\n              utf8encode = null;\n            }\n\n            var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;\n\n            if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n              return encodeArrayBuffer(packet, supportsBinary, callback);\n            } else if (Blob && data instanceof global.Blob) {\n              return encodeBlob(packet, supportsBinary, callback);\n            }\n\n            // might be an object with { base64: true, data: dataAsBase64String }\n            if (data && data.base64) {\n              return encodeBase64Object(packet, callback);\n            }\n\n            // Sending data as a utf-8 string\n            var encoded = packets[packet.type];\n\n            // data fragment is optional\n            if (undefined !== packet.data) {\n              encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n            }\n\n            return callback('' + encoded);\n          };\n\n          function encodeBase64Object(packet, callback) {\n            // packet data is an object { base64: true, data: dataAsBase64String }\n            var message = 'b' + exports.packets[packet.type] + packet.data.data;\n            return callback(message);\n          }\n\n          /**\n           * Encode packet helpers for binary types\n           */\n\n          function encodeArrayBuffer(packet, supportsBinary, callback) {\n            if (!supportsBinary) {\n              return exports.encodeBase64Packet(packet, callback);\n            }\n\n            var data = packet.data;\n            var contentArray = new Uint8Array(data);\n            var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n            resultBuffer[0] = packets[packet.type];\n            for (var i = 0; i < contentArray.length; i++) {\n              resultBuffer[i + 1] = contentArray[i];\n            }\n\n            return callback(resultBuffer.buffer);\n          }\n\n          function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n            if (!supportsBinary) {\n              return exports.encodeBase64Packet(packet, callback);\n            }\n\n            var fr = new FileReader();\n            fr.onload = function () {\n              packet.data = fr.result;\n              exports.encodePacket(packet, supportsBinary, true, callback);\n            };\n            return fr.readAsArrayBuffer(packet.data);\n          }\n\n          function encodeBlob(packet, supportsBinary, callback) {\n            if (!supportsBinary) {\n              return exports.encodeBase64Packet(packet, callback);\n            }\n\n            if (dontSendBlobs) {\n              return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n            }\n\n            var length = new Uint8Array(1);\n            length[0] = packets[packet.type];\n            var blob = new Blob([length.buffer, packet.data]);\n\n            return callback(blob);\n          }\n\n          /**\n           * Encodes a packet with binary data in a base64 string\n           *\n           * @param {Object} packet, has `type` and `data`\n           * @return {String} base64 encoded message\n           */\n\n          exports.encodeBase64Packet = function (packet, callback) {\n            var message = 'b' + exports.packets[packet.type];\n            if (Blob && packet.data instanceof global.Blob) {\n              var fr = new FileReader();\n              fr.onload = function () {\n                var b64 = fr.result.split(',')[1];\n                callback(message + b64);\n              };\n              return fr.readAsDataURL(packet.data);\n            }\n\n            var b64data;\n            try {\n              b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n            } catch (e) {\n              // iPhone Safari doesn't let you apply with typed arrays\n              var typed = new Uint8Array(packet.data);\n              var basic = new Array(typed.length);\n              for (var i = 0; i < typed.length; i++) {\n                basic[i] = typed[i];\n              }\n              b64data = String.fromCharCode.apply(null, basic);\n            }\n            message += global.btoa(b64data);\n            return callback(message);\n          };\n\n          /**\n           * Decodes a packet. Changes format to Blob if requested.\n           *\n           * @return {Object} with `type` and `data` (if any)\n           * @api private\n           */\n\n          exports.decodePacket = function (data, binaryType, utf8decode) {\n            // String data\n            if (typeof data == 'string' || data === undefined) {\n              if (data.charAt(0) == 'b') {\n                return exports.decodeBase64Packet(data.substr(1), binaryType);\n              }\n\n              if (utf8decode) {\n                try {\n                  data = utf8.decode(data);\n                } catch (e) {\n                  return err;\n                }\n              }\n              var type = data.charAt(0);\n\n              if (Number(type) != type || !packetslist[type]) {\n                return err;\n              }\n\n              if (data.length > 1) {\n                return { type: packetslist[type], data: data.substring(1) };\n              } else {\n                return { type: packetslist[type] };\n              }\n            }\n\n            var asArray = new Uint8Array(data);\n            var type = asArray[0];\n            var rest = sliceBuffer(data, 1);\n            if (Blob && binaryType === 'blob') {\n              rest = new Blob([rest]);\n            }\n            return { type: packetslist[type], data: rest };\n          };\n\n          /**\n           * Decodes a packet encoded in a base64 string\n           *\n           * @param {String} base64 encoded message\n           * @return {Object} with `type` and `data` (if any)\n           */\n\n          exports.decodeBase64Packet = function (msg, binaryType) {\n            var type = packetslist[msg.charAt(0)];\n            if (!global.ArrayBuffer) {\n              return { type: type, data: { base64: true, data: msg.substr(1) } };\n            }\n\n            var data = base64encoder.decode(msg.substr(1));\n\n            if (binaryType === 'blob' && Blob) {\n              data = new Blob([data]);\n            }\n\n            return { type: type, data: data };\n          };\n\n          /**\n           * Encodes multiple messages (payload).\n           *\n           *     <length>:data\n           *\n           * Example:\n           *\n           *     11:hello world2:hi\n           *\n           * If any contents are binary, they will be encoded as base64 strings. Base64\n           * encoded strings are marked with a b before the length specifier\n           *\n           * @param {Array} packets\n           * @api private\n           */\n\n          exports.encodePayload = function (packets, supportsBinary, callback) {\n            if (typeof supportsBinary == 'function') {\n              callback = supportsBinary;\n              supportsBinary = null;\n            }\n\n            var isBinary = hasBinary(packets);\n\n            if (supportsBinary && isBinary) {\n              if (Blob && !dontSendBlobs) {\n                return exports.encodePayloadAsBlob(packets, callback);\n              }\n\n              return exports.encodePayloadAsArrayBuffer(packets, callback);\n            }\n\n            if (!packets.length) {\n              return callback('0:');\n            }\n\n            function setLengthHeader(message) {\n              return message.length + ':' + message;\n            }\n\n            function encodeOne(packet, doneCallback) {\n              exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {\n                doneCallback(null, setLengthHeader(message));\n              });\n            }\n\n            map(packets, encodeOne, function (err, results) {\n              return callback(results.join(''));\n            });\n          };\n\n          /**\n           * Async array map using after\n           */\n\n          function map(ary, each, done) {\n            var result = new Array(ary.length);\n            var next = after(ary.length, done);\n\n            var eachWithIndex = function eachWithIndex(i, el, cb) {\n              each(el, function (error, msg) {\n                result[i] = msg;\n                cb(error, result);\n              });\n            };\n\n            for (var i = 0; i < ary.length; i++) {\n              eachWithIndex(i, ary[i], next);\n            }\n          }\n\n          /*\n           * Decodes data when a payload is maybe expected. Possible binary contents are\n           * decoded from their base64 representation\n           *\n           * @param {String} data, callback method\n           * @api public\n           */\n\n          exports.decodePayload = function (data, binaryType, callback) {\n            if (typeof data != 'string') {\n              return exports.decodePayloadAsBinary(data, binaryType, callback);\n            }\n\n            if (typeof binaryType === 'function') {\n              callback = binaryType;\n              binaryType = null;\n            }\n\n            var packet;\n            if (data == '') {\n              // parser error - ignoring payload\n              return callback(err, 0, 1);\n            }\n\n            var length = '',\n                n,\n                msg;\n\n            for (var i = 0, l = data.length; i < l; i++) {\n              var chr = data.charAt(i);\n\n              if (':' != chr) {\n                length += chr;\n              } else {\n                if ('' == length || length != (n = Number(length))) {\n                  // parser error - ignoring payload\n                  return callback(err, 0, 1);\n                }\n\n                msg = data.substr(i + 1, n);\n\n                if (length != msg.length) {\n                  // parser error - ignoring payload\n                  return callback(err, 0, 1);\n                }\n\n                if (msg.length) {\n                  packet = exports.decodePacket(msg, binaryType, true);\n\n                  if (err.type == packet.type && err.data == packet.data) {\n                    // parser error in individual packet - ignoring payload\n                    return callback(err, 0, 1);\n                  }\n\n                  var ret = callback(packet, i + n, l);\n                  if (false === ret) return;\n                }\n\n                // advance cursor\n                i += n;\n                length = '';\n              }\n            }\n\n            if (length != '') {\n              // parser error - ignoring payload\n              return callback(err, 0, 1);\n            }\n          };\n\n          /**\n           * Encodes multiple messages (payload) as binary.\n           *\n           * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n           * 255><data>\n           *\n           * Example:\n           * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n           *\n           * @param {Array} packets\n           * @return {ArrayBuffer} encoded payload\n           * @api private\n           */\n\n          exports.encodePayloadAsArrayBuffer = function (packets, callback) {\n            if (!packets.length) {\n              return callback(new ArrayBuffer(0));\n            }\n\n            function encodeOne(packet, doneCallback) {\n              exports.encodePacket(packet, true, true, function (data) {\n                return doneCallback(null, data);\n              });\n            }\n\n            map(packets, encodeOne, function (err, encodedPackets) {\n              var totalLength = encodedPackets.reduce(function (acc, p) {\n                var len;\n                if (typeof p === 'string') {\n                  len = p.length;\n                } else {\n                  len = p.byteLength;\n                }\n                return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n              }, 0);\n\n              var resultArray = new Uint8Array(totalLength);\n\n              var bufferIndex = 0;\n              encodedPackets.forEach(function (p) {\n                var isString = typeof p === 'string';\n                var ab = p;\n                if (isString) {\n                  var view = new Uint8Array(p.length);\n                  for (var i = 0; i < p.length; i++) {\n                    view[i] = p.charCodeAt(i);\n                  }\n                  ab = view.buffer;\n                }\n\n                if (isString) {\n                  // not true binary\n                  resultArray[bufferIndex++] = 0;\n                } else {\n                  // true binary\n                  resultArray[bufferIndex++] = 1;\n                }\n\n                var lenStr = ab.byteLength.toString();\n                for (var i = 0; i < lenStr.length; i++) {\n                  resultArray[bufferIndex++] = parseInt(lenStr[i]);\n                }\n                resultArray[bufferIndex++] = 255;\n\n                var view = new Uint8Array(ab);\n                for (var i = 0; i < view.length; i++) {\n                  resultArray[bufferIndex++] = view[i];\n                }\n              });\n\n              return callback(resultArray.buffer);\n            });\n          };\n\n          /**\n           * Encode as Blob\n           */\n\n          exports.encodePayloadAsBlob = function (packets, callback) {\n            function encodeOne(packet, doneCallback) {\n              exports.encodePacket(packet, true, true, function (encoded) {\n                var binaryIdentifier = new Uint8Array(1);\n                binaryIdentifier[0] = 1;\n                if (typeof encoded === 'string') {\n                  var view = new Uint8Array(encoded.length);\n                  for (var i = 0; i < encoded.length; i++) {\n                    view[i] = encoded.charCodeAt(i);\n                  }\n                  encoded = view.buffer;\n                  binaryIdentifier[0] = 0;\n                }\n\n                var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;\n\n                var lenStr = len.toString();\n                var lengthAry = new Uint8Array(lenStr.length + 1);\n                for (var i = 0; i < lenStr.length; i++) {\n                  lengthAry[i] = parseInt(lenStr[i]);\n                }\n                lengthAry[lenStr.length] = 255;\n\n                if (Blob) {\n                  var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n                  doneCallback(null, blob);\n                }\n              });\n            }\n\n            map(packets, encodeOne, function (err, results) {\n              return callback(new Blob(results));\n            });\n          };\n\n          /*\n           * Decodes data when a payload is maybe expected. Strings are decoded by\n           * interpreting each byte as a key code for entries marked to start with 0. See\n           * description of encodePayloadAsBinary\n           *\n           * @param {ArrayBuffer} data, callback method\n           * @api public\n           */\n\n          exports.decodePayloadAsBinary = function (data, binaryType, callback) {\n            if (typeof binaryType === 'function') {\n              callback = binaryType;\n              binaryType = null;\n            }\n\n            var bufferTail = data;\n            var buffers = [];\n\n            var numberTooLong = false;\n            while (bufferTail.byteLength > 0) {\n              var tailArray = new Uint8Array(bufferTail);\n              var isString = tailArray[0] === 0;\n              var msgLength = '';\n\n              for (var i = 1;; i++) {\n                if (tailArray[i] == 255) break;\n\n                if (msgLength.length > 310) {\n                  numberTooLong = true;\n                  break;\n                }\n\n                msgLength += tailArray[i];\n              }\n\n              if (numberTooLong) return callback(err, 0, 1);\n\n              bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n              msgLength = parseInt(msgLength);\n\n              var msg = sliceBuffer(bufferTail, 0, msgLength);\n              if (isString) {\n                try {\n                  msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n                } catch (e) {\n                  // iPhone Safari doesn't let you apply to typed arrays\n                  var typed = new Uint8Array(msg);\n                  msg = '';\n                  for (var i = 0; i < typed.length; i++) {\n                    msg += String.fromCharCode(typed[i]);\n                  }\n                }\n              }\n\n              buffers.push(msg);\n              bufferTail = sliceBuffer(bufferTail, msgLength);\n            }\n\n            var total = buffers.length;\n            buffers.forEach(function (buffer, i) {\n              callback(exports.decodePacket(buffer, binaryType, true), i, total);\n            });\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./keys\": 20, \"after\": 11, \"arraybuffer.slice\": 12, \"base64-arraybuffer\": 13, \"blob\": 14, \"has-binary\": 21, \"utf8\": 29 }], 20: [function (_dereq_, module, exports) {\n\n        /**\n         * Gets the keys for an object.\n         *\n         * @return {Array} keys\n         * @api private\n         */\n\n        module.exports = Object.keys || function keys(obj) {\n          var arr = [];\n          var has = Object.prototype.hasOwnProperty;\n\n          for (var i in obj) {\n            if (has.call(obj, i)) {\n              arr.push(i);\n            }\n          }\n          return arr;\n        };\n      }, {}], 21: [function (_dereq_, module, exports) {\n        (function (global) {\n\n          /*\n           * Module requirements.\n           */\n\n          var isArray = _dereq_('isarray');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = hasBinary;\n\n          /**\n           * Checks for binary data.\n           *\n           * Right now only Buffer and ArrayBuffer are supported..\n           *\n           * @param {Object} anything\n           * @api public\n           */\n\n          function hasBinary(data) {\n\n            function _hasBinary(obj) {\n              if (!obj) return false;\n\n              if (global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {\n                return true;\n              }\n\n              if (isArray(obj)) {\n                for (var i = 0; i < obj.length; i++) {\n                  if (_hasBinary(obj[i])) {\n                    return true;\n                  }\n                }\n              } else if (obj && 'object' == (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj))) {\n                if (obj.toJSON) {\n                  obj = obj.toJSON();\n                }\n\n                for (var key in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            }\n\n            return _hasBinary(data);\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"isarray\": 24 }], 22: [function (_dereq_, module, exports) {\n\n        /**\n         * Module exports.\n         *\n         * Logic borrowed from Modernizr:\n         *\n         *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n         */\n\n        try {\n          module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();\n        } catch (err) {\n          // if XMLHttp support is disabled in IE then it will throw\n          // when trying to create\n          module.exports = false;\n        }\n      }, {}], 23: [function (_dereq_, module, exports) {\n\n        var indexOf = [].indexOf;\n\n        module.exports = function (arr, obj) {\n          if (indexOf) return arr.indexOf(obj);\n          for (var i = 0; i < arr.length; ++i) {\n            if (arr[i] === obj) return i;\n          }\n          return -1;\n        };\n      }, {}], 24: [function (_dereq_, module, exports) {\n        module.exports = Array.isArray || function (arr) {\n          return Object.prototype.toString.call(arr) == '[object Array]';\n        };\n      }, {}], 25: [function (_dereq_, module, exports) {\n        /**\n         * Helpers.\n         */\n\n        var s = 1000;\n        var m = s * 60;\n        var h = m * 60;\n        var d = h * 24;\n        var y = d * 365.25;\n\n        /**\n         * Parse or format the given `val`.\n         *\n         * Options:\n         *\n         *  - `long` verbose formatting [false]\n         *\n         * @param {String|Number} val\n         * @param {Object} options\n         * @return {String|Number}\n         * @api public\n         */\n\n        module.exports = function (val, options) {\n          options = options || {};\n          if ('string' == typeof val) return parse(val);\n          return options.long ? long(val) : short(val);\n        };\n\n        /**\n         * Parse the given `str` and return milliseconds.\n         *\n         * @param {String} str\n         * @return {Number}\n         * @api private\n         */\n\n        function parse(str) {\n          str = '' + str;\n          if (str.length > 10000) return;\n          var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n          if (!match) return;\n          var n = parseFloat(match[1]);\n          var type = (match[2] || 'ms').toLowerCase();\n          switch (type) {\n            case 'years':\n            case 'year':\n            case 'yrs':\n            case 'yr':\n            case 'y':\n              return n * y;\n            case 'days':\n            case 'day':\n            case 'd':\n              return n * d;\n            case 'hours':\n            case 'hour':\n            case 'hrs':\n            case 'hr':\n            case 'h':\n              return n * h;\n            case 'minutes':\n            case 'minute':\n            case 'mins':\n            case 'min':\n            case 'm':\n              return n * m;\n            case 'seconds':\n            case 'second':\n            case 'secs':\n            case 'sec':\n            case 's':\n              return n * s;\n            case 'milliseconds':\n            case 'millisecond':\n            case 'msecs':\n            case 'msec':\n            case 'ms':\n              return n;\n          }\n        }\n\n        /**\n         * Short format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n        function short(ms) {\n          if (ms >= d) return Math.round(ms / d) + 'd';\n          if (ms >= h) return Math.round(ms / h) + 'h';\n          if (ms >= m) return Math.round(ms / m) + 'm';\n          if (ms >= s) return Math.round(ms / s) + 's';\n          return ms + 'ms';\n        }\n\n        /**\n         * Long format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n        function long(ms) {\n          return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';\n        }\n\n        /**\n         * Pluralization helper.\n         */\n\n        function plural(ms, n, name) {\n          if (ms < n) return;\n          if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n          return Math.ceil(ms / n) + ' ' + name + 's';\n        }\n      }, {}], 26: [function (_dereq_, module, exports) {\n        (function (global) {\n          /**\n           * JSON parse.\n           *\n           * @see Based on jQuery#parseJSON (MIT) and JSON2\n           * @api private\n           */\n\n          var rvalidchars = /^[\\],:{}\\s]*$/;\n          var rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n          var rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n          var rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\n          var rtrimLeft = /^\\s+/;\n          var rtrimRight = /\\s+$/;\n\n          module.exports = function parsejson(data) {\n            if ('string' != typeof data || !data) {\n              return null;\n            }\n\n            data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\n\n            // Attempt to parse using the native JSON parser first\n            if (global.JSON && JSON.parse) {\n              return JSON.parse(data);\n            }\n\n            if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {\n              return new Function('return ' + data)();\n            }\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, {}], 27: [function (_dereq_, module, exports) {\n        /**\n         * Compiles a querystring\n         * Returns string representation of the object\n         *\n         * @param {Object}\n         * @api private\n         */\n\n        exports.encode = function (obj) {\n          var str = '';\n\n          for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {\n              if (str.length) str += '&';\n              str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n            }\n          }\n\n          return str;\n        };\n\n        /**\n         * Parses a simple querystring into an object\n         *\n         * @param {String} qs\n         * @api private\n         */\n\n        exports.decode = function (qs) {\n          var qry = {};\n          var pairs = qs.split('&');\n          for (var i = 0, l = pairs.length; i < l; i++) {\n            var pair = pairs[i].split('=');\n            qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n          }\n          return qry;\n        };\n      }, {}], 28: [function (_dereq_, module, exports) {\n        /**\n         * Parses an URI\n         *\n         * @author Steven Levithan <stevenlevithan.com> (MIT license)\n         * @api private\n         */\n\n        var re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n        var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n\n        module.exports = function parseuri(str) {\n          var src = str,\n              b = str.indexOf('['),\n              e = str.indexOf(']');\n\n          if (b != -1 && e != -1) {\n            str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n          }\n\n          var m = re.exec(str || ''),\n              uri = {},\n              i = 14;\n\n          while (i--) {\n            uri[parts[i]] = m[i] || '';\n          }\n\n          if (b != -1 && e != -1) {\n            uri.source = src;\n            uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n            uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n            uri.ipv6uri = true;\n          }\n\n          return uri;\n        };\n      }, {}], 29: [function (_dereq_, module, exports) {\n        (function (global) {\n          /*! https://mths.be/utf8js v2.0.0 by @mathias */\n          ;(function (root) {\n\n            // Detect free variables `exports`\n            var freeExports = (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) == 'object' && exports;\n\n            // Detect free variable `module`\n            var freeModule = (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module && module.exports == freeExports && module;\n\n            // Detect free variable `global`, from Node.js or Browserified code,\n            // and use it as `root`\n            var freeGlobal = (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global;\n            if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n              root = freeGlobal;\n            }\n\n            /*--------------------------------------------------------------------------*/\n\n            var stringFromCharCode = String.fromCharCode;\n\n            // Taken from https://mths.be/punycode\n            function ucs2decode(string) {\n              var output = [];\n              var counter = 0;\n              var length = string.length;\n              var value;\n              var extra;\n              while (counter < length) {\n                value = string.charCodeAt(counter++);\n                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n                  // high surrogate, and there is a next character\n                  extra = string.charCodeAt(counter++);\n                  if ((extra & 0xFC00) == 0xDC00) {\n                    // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                  } else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                  }\n                } else {\n                  output.push(value);\n                }\n              }\n              return output;\n            }\n\n            // Taken from https://mths.be/punycode\n            function ucs2encode(array) {\n              var length = array.length;\n              var index = -1;\n              var value;\n              var output = '';\n              while (++index < length) {\n                value = array[index];\n                if (value > 0xFFFF) {\n                  value -= 0x10000;\n                  output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n                  value = 0xDC00 | value & 0x3FF;\n                }\n                output += stringFromCharCode(value);\n              }\n              return output;\n            }\n\n            function checkScalarValue(codePoint) {\n              if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n                throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');\n              }\n            }\n            /*--------------------------------------------------------------------------*/\n\n            function createByte(codePoint, shift) {\n              return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);\n            }\n\n            function encodeCodePoint(codePoint) {\n              if ((codePoint & 0xFFFFFF80) == 0) {\n                // 1-byte sequence\n                return stringFromCharCode(codePoint);\n              }\n              var symbol = '';\n              if ((codePoint & 0xFFFFF800) == 0) {\n                // 2-byte sequence\n                symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);\n              } else if ((codePoint & 0xFFFF0000) == 0) {\n                // 3-byte sequence\n                checkScalarValue(codePoint);\n                symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);\n                symbol += createByte(codePoint, 6);\n              } else if ((codePoint & 0xFFE00000) == 0) {\n                // 4-byte sequence\n                symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);\n                symbol += createByte(codePoint, 12);\n                symbol += createByte(codePoint, 6);\n              }\n              symbol += stringFromCharCode(codePoint & 0x3F | 0x80);\n              return symbol;\n            }\n\n            function utf8encode(string) {\n              var codePoints = ucs2decode(string);\n              var length = codePoints.length;\n              var index = -1;\n              var codePoint;\n              var byteString = '';\n              while (++index < length) {\n                codePoint = codePoints[index];\n                byteString += encodeCodePoint(codePoint);\n              }\n              return byteString;\n            }\n\n            /*--------------------------------------------------------------------------*/\n\n            function readContinuationByte() {\n              if (byteIndex >= byteCount) {\n                throw Error('Invalid byte index');\n              }\n\n              var continuationByte = byteArray[byteIndex] & 0xFF;\n              byteIndex++;\n\n              if ((continuationByte & 0xC0) == 0x80) {\n                return continuationByte & 0x3F;\n              }\n\n              // If we end up here, it’s not a continuation byte\n              throw Error('Invalid continuation byte');\n            }\n\n            function decodeSymbol() {\n              var byte1;\n              var byte2;\n              var byte3;\n              var byte4;\n              var codePoint;\n\n              if (byteIndex > byteCount) {\n                throw Error('Invalid byte index');\n              }\n\n              if (byteIndex == byteCount) {\n                return false;\n              }\n\n              // Read first byte\n              byte1 = byteArray[byteIndex] & 0xFF;\n              byteIndex++;\n\n              // 1-byte sequence (no continuation bytes)\n              if ((byte1 & 0x80) == 0) {\n                return byte1;\n              }\n\n              // 2-byte sequence\n              if ((byte1 & 0xE0) == 0xC0) {\n                var byte2 = readContinuationByte();\n                codePoint = (byte1 & 0x1F) << 6 | byte2;\n                if (codePoint >= 0x80) {\n                  return codePoint;\n                } else {\n                  throw Error('Invalid continuation byte');\n                }\n              }\n\n              // 3-byte sequence (may include unpaired surrogates)\n              if ((byte1 & 0xF0) == 0xE0) {\n                byte2 = readContinuationByte();\n                byte3 = readContinuationByte();\n                codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;\n                if (codePoint >= 0x0800) {\n                  checkScalarValue(codePoint);\n                  return codePoint;\n                } else {\n                  throw Error('Invalid continuation byte');\n                }\n              }\n\n              // 4-byte sequence\n              if ((byte1 & 0xF8) == 0xF0) {\n                byte2 = readContinuationByte();\n                byte3 = readContinuationByte();\n                byte4 = readContinuationByte();\n                codePoint = (byte1 & 0x0F) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;\n                if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n                  return codePoint;\n                }\n              }\n\n              throw Error('Invalid UTF-8 detected');\n            }\n\n            var byteArray;\n            var byteCount;\n            var byteIndex;\n            function utf8decode(byteString) {\n              byteArray = ucs2decode(byteString);\n              byteCount = byteArray.length;\n              byteIndex = 0;\n              var codePoints = [];\n              var tmp;\n              while ((tmp = decodeSymbol()) !== false) {\n                codePoints.push(tmp);\n              }\n              return ucs2encode(codePoints);\n            }\n\n            /*--------------------------------------------------------------------------*/\n\n            var utf8 = {\n              'version': '2.0.0',\n              'encode': utf8encode,\n              'decode': utf8decode\n            };\n\n            // Some AMD build optimizers, like r.js, check for specific condition patterns\n            // like the following:\n            if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {\n              define(function () {\n                return utf8;\n              });\n            } else if (freeExports && !freeExports.nodeType) {\n              if (freeModule) {\n                // in Node.js or RingoJS v0.8.0+\n                freeModule.exports = utf8;\n              } else {\n                // in Narwhal or RingoJS v0.7.0-\n                var object = {};\n                var hasOwnProperty = object.hasOwnProperty;\n                for (var key in utf8) {\n                  hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n                }\n              }\n            } else {\n              // in Rhino or a web browser\n              root.utf8 = utf8;\n            }\n          })(this);\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, {}], 30: [function (_dereq_, module, exports) {\n        'use strict';\n\n        var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n            length = 64,\n            map = {},\n            seed = 0,\n            i = 0,\n            prev;\n\n        /**\n         * Return a string representing the specified number.\n         *\n         * @param {Number} num The number to convert.\n         * @returns {String} The string representation of the number.\n         * @api public\n         */\n        function encode(num) {\n          var encoded = '';\n\n          do {\n            encoded = alphabet[num % length] + encoded;\n            num = Math.floor(num / length);\n          } while (num > 0);\n\n          return encoded;\n        }\n\n        /**\n         * Return the integer value specified by the given string.\n         *\n         * @param {String} str The string to convert.\n         * @returns {Number} The integer value represented by the string.\n         * @api public\n         */\n        function decode(str) {\n          var decoded = 0;\n\n          for (i = 0; i < str.length; i++) {\n            decoded = decoded * length + map[str.charAt(i)];\n          }\n\n          return decoded;\n        }\n\n        /**\n         * Yeast: A tiny growing id generator.\n         *\n         * @returns {String} A unique id.\n         * @api public\n         */\n        function yeast() {\n          var now = encode(+new Date());\n\n          if (now !== prev) return seed = 0, prev = now;\n          return now + '.' + encode(seed++);\n        }\n\n        //\n        // Map each character to its index.\n        //\n        for (; i < length; i++) {\n          map[alphabet[i]] = i;\n        } //\n        // Expose the `yeast`, `encode` and `decode` functions.\n        //\n        yeast.encode = encode;\n        yeast.decode = decode;\n        module.exports = yeast;\n      }, {}], 31: [function (_dereq_, module, exports) {\n\n        /**\n         * Module dependencies.\n         */\n\n        var url = _dereq_('./url');\n        var parser = _dereq_('socket.io-parser');\n        var Manager = _dereq_('./manager');\n        var debug = _dereq_('debug')('socket.io-client');\n\n        /**\n         * Module exports.\n         */\n\n        module.exports = exports = lookup;\n\n        /**\n         * Managers cache.\n         */\n\n        var cache = exports.managers = {};\n\n        /**\n         * Looks up an existing `Manager` for multiplexing.\n         * If the user summons:\n         *\n         *   `io('http://localhost/a');`\n         *   `io('http://localhost/b');`\n         *\n         * We reuse the existing instance based on same scheme/port/host,\n         * and we initialize sockets for each namespace.\n         *\n         * @api public\n         */\n\n        function lookup(uri, opts) {\n          if ((typeof uri === \"undefined\" ? \"undefined\" : _typeof(uri)) == 'object') {\n            opts = uri;\n            uri = undefined;\n          }\n\n          opts = opts || {};\n\n          var parsed = url(uri);\n          var source = parsed.source;\n          var id = parsed.id;\n          var path = parsed.path;\n          var sameNamespace = cache[id] && path in cache[id].nsps;\n          var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;\n\n          var io;\n\n          if (newConnection) {\n            debug('ignoring socket cache for %s', source);\n            io = Manager(source, opts);\n          } else {\n            if (!cache[id]) {\n              debug('new io instance for %s', source);\n              cache[id] = Manager(source, opts);\n            }\n            io = cache[id];\n          }\n\n          return io.socket(parsed.path);\n        }\n\n        /**\n         * Protocol version.\n         *\n         * @api public\n         */\n\n        exports.protocol = parser.protocol;\n\n        /**\n         * `connect`.\n         *\n         * @param {String} uri\n         * @api public\n         */\n\n        exports.connect = lookup;\n\n        /**\n         * Expose constructors for standalone build.\n         *\n         * @api public\n         */\n\n        exports.Manager = _dereq_('./manager');\n        exports.Socket = _dereq_('./socket');\n      }, { \"./manager\": 32, \"./socket\": 34, \"./url\": 35, \"debug\": 39, \"socket.io-parser\": 47 }], 32: [function (_dereq_, module, exports) {\n\n        /**\n         * Module dependencies.\n         */\n\n        var eio = _dereq_('engine.io-client');\n        var Socket = _dereq_('./socket');\n        var Emitter = _dereq_('component-emitter');\n        var parser = _dereq_('socket.io-parser');\n        var on = _dereq_('./on');\n        var bind = _dereq_('component-bind');\n        var debug = _dereq_('debug')('socket.io-client:manager');\n        var indexOf = _dereq_('indexof');\n        var Backoff = _dereq_('backo2');\n\n        /**\n         * IE6+ hasOwnProperty\n         */\n\n        var has = Object.prototype.hasOwnProperty;\n\n        /**\n         * Module exports\n         */\n\n        module.exports = Manager;\n\n        /**\n         * `Manager` constructor.\n         *\n         * @param {String} engine instance or engine uri/opts\n         * @param {Object} options\n         * @api public\n         */\n\n        function Manager(uri, opts) {\n          if (!(this instanceof Manager)) return new Manager(uri, opts);\n          if (uri && 'object' == (typeof uri === \"undefined\" ? \"undefined\" : _typeof(uri))) {\n            opts = uri;\n            uri = undefined;\n          }\n          opts = opts || {};\n\n          opts.path = opts.path || '/socket.io';\n          this.nsps = {};\n          this.subs = [];\n          this.opts = opts;\n          this.reconnection(opts.reconnection !== false);\n          this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n          this.reconnectionDelay(opts.reconnectionDelay || 1000);\n          this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n          this.randomizationFactor(opts.randomizationFactor || 0.5);\n          this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor()\n          });\n          this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n          this.readyState = 'closed';\n          this.uri = uri;\n          this.connecting = [];\n          this.lastPing = null;\n          this.encoding = false;\n          this.packetBuffer = [];\n          this.encoder = new parser.Encoder();\n          this.decoder = new parser.Decoder();\n          this.autoConnect = opts.autoConnect !== false;\n          if (this.autoConnect) this.open();\n        }\n\n        /**\n         * Propagate given event to sockets and emit on `this`\n         *\n         * @api private\n         */\n\n        Manager.prototype.emitAll = function () {\n          this.emit.apply(this, arguments);\n          for (var nsp in this.nsps) {\n            if (has.call(this.nsps, nsp)) {\n              this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n            }\n          }\n        };\n\n        /**\n         * Update `socket.id` of all sockets\n         *\n         * @api private\n         */\n\n        Manager.prototype.updateSocketIds = function () {\n          for (var nsp in this.nsps) {\n            if (has.call(this.nsps, nsp)) {\n              this.nsps[nsp].id = this.engine.id;\n            }\n          }\n        };\n\n        /**\n         * Mix in `Emitter`.\n         */\n\n        Emitter(Manager.prototype);\n\n        /**\n         * Sets the `reconnection` config.\n         *\n         * @param {Boolean} true/false if it should automatically reconnect\n         * @return {Manager} self or value\n         * @api public\n         */\n\n        Manager.prototype.reconnection = function (v) {\n          if (!arguments.length) return this._reconnection;\n          this._reconnection = !!v;\n          return this;\n        };\n\n        /**\n         * Sets the reconnection attempts config.\n         *\n         * @param {Number} max reconnection attempts before giving up\n         * @return {Manager} self or value\n         * @api public\n         */\n\n        Manager.prototype.reconnectionAttempts = function (v) {\n          if (!arguments.length) return this._reconnectionAttempts;\n          this._reconnectionAttempts = v;\n          return this;\n        };\n\n        /**\n         * Sets the delay between reconnections.\n         *\n         * @param {Number} delay\n         * @return {Manager} self or value\n         * @api public\n         */\n\n        Manager.prototype.reconnectionDelay = function (v) {\n          if (!arguments.length) return this._reconnectionDelay;\n          this._reconnectionDelay = v;\n          this.backoff && this.backoff.setMin(v);\n          return this;\n        };\n\n        Manager.prototype.randomizationFactor = function (v) {\n          if (!arguments.length) return this._randomizationFactor;\n          this._randomizationFactor = v;\n          this.backoff && this.backoff.setJitter(v);\n          return this;\n        };\n\n        /**\n         * Sets the maximum delay between reconnections.\n         *\n         * @param {Number} delay\n         * @return {Manager} self or value\n         * @api public\n         */\n\n        Manager.prototype.reconnectionDelayMax = function (v) {\n          if (!arguments.length) return this._reconnectionDelayMax;\n          this._reconnectionDelayMax = v;\n          this.backoff && this.backoff.setMax(v);\n          return this;\n        };\n\n        /**\n         * Sets the connection timeout. `false` to disable\n         *\n         * @return {Manager} self or value\n         * @api public\n         */\n\n        Manager.prototype.timeout = function (v) {\n          if (!arguments.length) return this._timeout;\n          this._timeout = v;\n          return this;\n        };\n\n        /**\n         * Starts trying to reconnect if reconnection is enabled and we have not\n         * started reconnecting yet\n         *\n         * @api private\n         */\n\n        Manager.prototype.maybeReconnectOnOpen = function () {\n          // Only try to reconnect if it's the first time we're connecting\n          if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n          }\n        };\n\n        /**\n         * Sets the current transport `socket`.\n         *\n         * @param {Function} optional, callback\n         * @return {Manager} self\n         * @api public\n         */\n\n        Manager.prototype.open = Manager.prototype.connect = function (fn) {\n          debug('readyState %s', this.readyState);\n          if (~this.readyState.indexOf('open')) return this;\n\n          debug('opening %s', this.uri);\n          this.engine = eio(this.uri, this.opts);\n          var socket = this.engine;\n          var self = this;\n          this.readyState = 'opening';\n          this.skipReconnect = false;\n\n          // emit `open`\n          var openSub = on(socket, 'open', function () {\n            self.onopen();\n            fn && fn();\n          });\n\n          // emit `connect_error`\n          var errorSub = on(socket, 'error', function (data) {\n            debug('connect_error');\n            self.cleanup();\n            self.readyState = 'closed';\n            self.emitAll('connect_error', data);\n            if (fn) {\n              var err = new Error('Connection error');\n              err.data = data;\n              fn(err);\n            } else {\n              // Only do this if there is no fn to handle the error\n              self.maybeReconnectOnOpen();\n            }\n          });\n\n          // emit `connect_timeout`\n          if (false !== this._timeout) {\n            var timeout = this._timeout;\n            debug('connect attempt will timeout after %d', timeout);\n\n            // set timer\n            var timer = setTimeout(function () {\n              debug('connect attempt timed out after %d', timeout);\n              openSub.destroy();\n              socket.close();\n              socket.emit('error', 'timeout');\n              self.emitAll('connect_timeout', timeout);\n            }, timeout);\n\n            this.subs.push({\n              destroy: function destroy() {\n                clearTimeout(timer);\n              }\n            });\n          }\n\n          this.subs.push(openSub);\n          this.subs.push(errorSub);\n\n          return this;\n        };\n\n        /**\n         * Called upon transport open.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onopen = function () {\n          debug('open');\n\n          // clear old subs\n          this.cleanup();\n\n          // mark as open\n          this.readyState = 'open';\n          this.emit('open');\n\n          // add new subs\n          var socket = this.engine;\n          this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n          this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n          this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n          this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n          this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n          this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n        };\n\n        /**\n         * Called upon a ping.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onping = function () {\n          this.lastPing = new Date();\n          this.emitAll('ping');\n        };\n\n        /**\n         * Called upon a packet.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onpong = function () {\n          this.emitAll('pong', new Date() - this.lastPing);\n        };\n\n        /**\n         * Called with data.\n         *\n         * @api private\n         */\n\n        Manager.prototype.ondata = function (data) {\n          this.decoder.add(data);\n        };\n\n        /**\n         * Called when parser fully decodes a packet.\n         *\n         * @api private\n         */\n\n        Manager.prototype.ondecoded = function (packet) {\n          this.emit('packet', packet);\n        };\n\n        /**\n         * Called upon socket error.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onerror = function (err) {\n          debug('error', err);\n          this.emitAll('error', err);\n        };\n\n        /**\n         * Creates a new socket for the given `nsp`.\n         *\n         * @return {Socket}\n         * @api public\n         */\n\n        Manager.prototype.socket = function (nsp) {\n          var socket = this.nsps[nsp];\n          if (!socket) {\n            socket = new Socket(this, nsp);\n            this.nsps[nsp] = socket;\n            var self = this;\n            socket.on('connecting', onConnecting);\n            socket.on('connect', function () {\n              socket.id = self.engine.id;\n            });\n\n            if (this.autoConnect) {\n              // manually call here since connecting evnet is fired before listening\n              onConnecting();\n            }\n          }\n\n          function onConnecting() {\n            if (!~indexOf(self.connecting, socket)) {\n              self.connecting.push(socket);\n            }\n          }\n\n          return socket;\n        };\n\n        /**\n         * Called upon a socket close.\n         *\n         * @param {Socket} socket\n         */\n\n        Manager.prototype.destroy = function (socket) {\n          var index = indexOf(this.connecting, socket);\n          if (~index) this.connecting.splice(index, 1);\n          if (this.connecting.length) return;\n\n          this.close();\n        };\n\n        /**\n         * Writes a packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */\n\n        Manager.prototype.packet = function (packet) {\n          debug('writing packet %j', packet);\n          var self = this;\n\n          if (!self.encoding) {\n            // encode, then write to engine with result\n            self.encoding = true;\n            this.encoder.encode(packet, function (encodedPackets) {\n              for (var i = 0; i < encodedPackets.length; i++) {\n                self.engine.write(encodedPackets[i], packet.options);\n              }\n              self.encoding = false;\n              self.processPacketQueue();\n            });\n          } else {\n            // add packet to the queue\n            self.packetBuffer.push(packet);\n          }\n        };\n\n        /**\n         * If packet buffer is non-empty, begins encoding the\n         * next packet in line.\n         *\n         * @api private\n         */\n\n        Manager.prototype.processPacketQueue = function () {\n          if (this.packetBuffer.length > 0 && !this.encoding) {\n            var pack = this.packetBuffer.shift();\n            this.packet(pack);\n          }\n        };\n\n        /**\n         * Clean up transport subscriptions and packet buffer.\n         *\n         * @api private\n         */\n\n        Manager.prototype.cleanup = function () {\n          debug('cleanup');\n\n          var sub;\n          while (sub = this.subs.shift()) {\n            sub.destroy();\n          }this.packetBuffer = [];\n          this.encoding = false;\n          this.lastPing = null;\n\n          this.decoder.destroy();\n        };\n\n        /**\n         * Close the current socket.\n         *\n         * @api private\n         */\n\n        Manager.prototype.close = Manager.prototype.disconnect = function () {\n          debug('disconnect');\n          this.skipReconnect = true;\n          this.reconnecting = false;\n          if ('opening' == this.readyState) {\n            // `onclose` will not fire because\n            // an open event never happened\n            this.cleanup();\n          }\n          this.backoff.reset();\n          this.readyState = 'closed';\n          if (this.engine) this.engine.close();\n        };\n\n        /**\n         * Called upon engine close.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onclose = function (reason) {\n          debug('onclose');\n\n          this.cleanup();\n          this.backoff.reset();\n          this.readyState = 'closed';\n          this.emit('close', reason);\n\n          if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n          }\n        };\n\n        /**\n         * Attempt a reconnection.\n         *\n         * @api private\n         */\n\n        Manager.prototype.reconnect = function () {\n          if (this.reconnecting || this.skipReconnect) return this;\n\n          var self = this;\n\n          if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug('reconnect failed');\n            this.backoff.reset();\n            this.emitAll('reconnect_failed');\n            this.reconnecting = false;\n          } else {\n            var delay = this.backoff.duration();\n            debug('will wait %dms before reconnect attempt', delay);\n\n            this.reconnecting = true;\n            var timer = setTimeout(function () {\n              if (self.skipReconnect) return;\n\n              debug('attempting reconnect');\n              self.emitAll('reconnect_attempt', self.backoff.attempts);\n              self.emitAll('reconnecting', self.backoff.attempts);\n\n              // check again for the case socket closed in above events\n              if (self.skipReconnect) return;\n\n              self.open(function (err) {\n                if (err) {\n                  debug('reconnect attempt error');\n                  self.reconnecting = false;\n                  self.reconnect();\n                  self.emitAll('reconnect_error', err.data);\n                } else {\n                  debug('reconnect success');\n                  self.onreconnect();\n                }\n              });\n            }, delay);\n\n            this.subs.push({\n              destroy: function destroy() {\n                clearTimeout(timer);\n              }\n            });\n          }\n        };\n\n        /**\n         * Called upon successful reconnect.\n         *\n         * @api private\n         */\n\n        Manager.prototype.onreconnect = function () {\n          var attempt = this.backoff.attempts;\n          this.reconnecting = false;\n          this.backoff.reset();\n          this.updateSocketIds();\n          this.emitAll('reconnect', attempt);\n        };\n      }, { \"./on\": 33, \"./socket\": 34, \"backo2\": 36, \"component-bind\": 37, \"component-emitter\": 38, \"debug\": 39, \"engine.io-client\": 1, \"indexof\": 42, \"socket.io-parser\": 47 }], 33: [function (_dereq_, module, exports) {\n\n        /**\n         * Module exports.\n         */\n\n        module.exports = on;\n\n        /**\n         * Helper for subscriptions.\n         *\n         * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n         * @param {String} event name\n         * @param {Function} callback\n         * @api public\n         */\n\n        function on(obj, ev, fn) {\n          obj.on(ev, fn);\n          return {\n            destroy: function destroy() {\n              obj.removeListener(ev, fn);\n            }\n          };\n        }\n      }, {}], 34: [function (_dereq_, module, exports) {\n\n        /**\n         * Module dependencies.\n         */\n\n        var parser = _dereq_('socket.io-parser');\n        var Emitter = _dereq_('component-emitter');\n        var toArray = _dereq_('to-array');\n        var on = _dereq_('./on');\n        var bind = _dereq_('component-bind');\n        var debug = _dereq_('debug')('socket.io-client:socket');\n        var hasBin = _dereq_('has-binary');\n\n        /**\n         * Module exports.\n         */\n\n        module.exports = exports = Socket;\n\n        /**\n         * Internal events (blacklisted).\n         * These events can't be emitted by the user.\n         *\n         * @api private\n         */\n\n        var events = {\n          connect: 1,\n          connect_error: 1,\n          connect_timeout: 1,\n          connecting: 1,\n          disconnect: 1,\n          error: 1,\n          reconnect: 1,\n          reconnect_attempt: 1,\n          reconnect_failed: 1,\n          reconnect_error: 1,\n          reconnecting: 1,\n          ping: 1,\n          pong: 1\n        };\n\n        /**\n         * Shortcut to `Emitter#emit`.\n         */\n\n        var emit = Emitter.prototype.emit;\n\n        /**\n         * `Socket` constructor.\n         *\n         * @api public\n         */\n\n        function Socket(io, nsp) {\n          this.io = io;\n          this.nsp = nsp;\n          this.json = this; // compat\n          this.ids = 0;\n          this.acks = {};\n          this.receiveBuffer = [];\n          this.sendBuffer = [];\n          this.connected = false;\n          this.disconnected = true;\n          if (this.io.autoConnect) this.open();\n        }\n\n        /**\n         * Mix in `Emitter`.\n         */\n\n        Emitter(Socket.prototype);\n\n        /**\n         * Subscribe to open, close and packet events\n         *\n         * @api private\n         */\n\n        Socket.prototype.subEvents = function () {\n          if (this.subs) return;\n\n          var io = this.io;\n          this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];\n        };\n\n        /**\n         * \"Opens\" the socket.\n         *\n         * @api public\n         */\n\n        Socket.prototype.open = Socket.prototype.connect = function () {\n          if (this.connected) return this;\n\n          this.subEvents();\n          this.io.open(); // ensure open\n          if ('open' == this.io.readyState) this.onopen();\n          this.emit('connecting');\n          return this;\n        };\n\n        /**\n         * Sends a `message` event.\n         *\n         * @return {Socket} self\n         * @api public\n         */\n\n        Socket.prototype.send = function () {\n          var args = toArray(arguments);\n          args.unshift('message');\n          this.emit.apply(this, args);\n          return this;\n        };\n\n        /**\n         * Override `emit`.\n         * If the event is in `events`, it's emitted normally.\n         *\n         * @param {String} event name\n         * @return {Socket} self\n         * @api public\n         */\n\n        Socket.prototype.emit = function (ev) {\n          if (events.hasOwnProperty(ev)) {\n            emit.apply(this, arguments);\n            return this;\n          }\n\n          var args = toArray(arguments);\n          var parserType = parser.EVENT; // default\n          if (hasBin(args)) {\n            parserType = parser.BINARY_EVENT;\n          } // binary\n          var packet = { type: parserType, data: args };\n\n          packet.options = {};\n          packet.options.compress = !this.flags || false !== this.flags.compress;\n\n          // event ack callback\n          if ('function' == typeof args[args.length - 1]) {\n            debug('emitting packet with ack id %d', this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n          }\n\n          if (this.connected) {\n            this.packet(packet);\n          } else {\n            this.sendBuffer.push(packet);\n          }\n\n          delete this.flags;\n\n          return this;\n        };\n\n        /**\n         * Sends a packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */\n\n        Socket.prototype.packet = function (packet) {\n          packet.nsp = this.nsp;\n          this.io.packet(packet);\n        };\n\n        /**\n         * Called upon engine `open`.\n         *\n         * @api private\n         */\n\n        Socket.prototype.onopen = function () {\n          debug('transport is open - connecting');\n\n          // write connect packet if necessary\n          if ('/' != this.nsp) {\n            this.packet({ type: parser.CONNECT });\n          }\n        };\n\n        /**\n         * Called upon engine `close`.\n         *\n         * @param {String} reason\n         * @api private\n         */\n\n        Socket.prototype.onclose = function (reason) {\n          debug('close (%s)', reason);\n          this.connected = false;\n          this.disconnected = true;\n          delete this.id;\n          this.emit('disconnect', reason);\n        };\n\n        /**\n         * Called with socket packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */\n\n        Socket.prototype.onpacket = function (packet) {\n          if (packet.nsp != this.nsp) return;\n\n          switch (packet.type) {\n            case parser.CONNECT:\n              this.onconnect();\n              break;\n\n            case parser.EVENT:\n              this.onevent(packet);\n              break;\n\n            case parser.BINARY_EVENT:\n              this.onevent(packet);\n              break;\n\n            case parser.ACK:\n              this.onack(packet);\n              break;\n\n            case parser.BINARY_ACK:\n              this.onack(packet);\n              break;\n\n            case parser.DISCONNECT:\n              this.ondisconnect();\n              break;\n\n            case parser.ERROR:\n              this.emit('error', packet.data);\n              break;\n          }\n        };\n\n        /**\n         * Called upon a server event.\n         *\n         * @param {Object} packet\n         * @api private\n         */\n\n        Socket.prototype.onevent = function (packet) {\n          var args = packet.data || [];\n          debug('emitting event %j', args);\n\n          if (null != packet.id) {\n            debug('attaching ack callback to event');\n            args.push(this.ack(packet.id));\n          }\n\n          if (this.connected) {\n            emit.apply(this, args);\n          } else {\n            this.receiveBuffer.push(args);\n          }\n        };\n\n        /**\n         * Produces an ack callback to emit with an event.\n         *\n         * @api private\n         */\n\n        Socket.prototype.ack = function (id) {\n          var self = this;\n          var sent = false;\n          return function () {\n            // prevent double callbacks\n            if (sent) return;\n            sent = true;\n            var args = toArray(arguments);\n            debug('sending ack %j', args);\n\n            var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\n            self.packet({\n              type: type,\n              id: id,\n              data: args\n            });\n          };\n        };\n\n        /**\n         * Called upon a server acknowlegement.\n         *\n         * @param {Object} packet\n         * @api private\n         */\n\n        Socket.prototype.onack = function (packet) {\n          var ack = this.acks[packet.id];\n          if ('function' == typeof ack) {\n            debug('calling ack %s with %j', packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n          } else {\n            debug('bad ack %s', packet.id);\n          }\n        };\n\n        /**\n         * Called upon server connect.\n         *\n         * @api private\n         */\n\n        Socket.prototype.onconnect = function () {\n          this.connected = true;\n          this.disconnected = false;\n          this.emit('connect');\n          this.emitBuffered();\n        };\n\n        /**\n         * Emit buffered events (received and emitted).\n         *\n         * @api private\n         */\n\n        Socket.prototype.emitBuffered = function () {\n          var i;\n          for (i = 0; i < this.receiveBuffer.length; i++) {\n            emit.apply(this, this.receiveBuffer[i]);\n          }\n          this.receiveBuffer = [];\n\n          for (i = 0; i < this.sendBuffer.length; i++) {\n            this.packet(this.sendBuffer[i]);\n          }\n          this.sendBuffer = [];\n        };\n\n        /**\n         * Called upon server disconnect.\n         *\n         * @api private\n         */\n\n        Socket.prototype.ondisconnect = function () {\n          debug('server disconnect (%s)', this.nsp);\n          this.destroy();\n          this.onclose('io server disconnect');\n        };\n\n        /**\n         * Called upon forced client/server side disconnections,\n         * this method ensures the manager stops tracking us and\n         * that reconnections don't get triggered for this.\n         *\n         * @api private.\n         */\n\n        Socket.prototype.destroy = function () {\n          if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            for (var i = 0; i < this.subs.length; i++) {\n              this.subs[i].destroy();\n            }\n            this.subs = null;\n          }\n\n          this.io.destroy(this);\n        };\n\n        /**\n         * Disconnects the socket manually.\n         *\n         * @return {Socket} self\n         * @api public\n         */\n\n        Socket.prototype.close = Socket.prototype.disconnect = function () {\n          if (this.connected) {\n            debug('performing disconnect (%s)', this.nsp);\n            this.packet({ type: parser.DISCONNECT });\n          }\n\n          // remove socket from pool\n          this.destroy();\n\n          if (this.connected) {\n            // fire events\n            this.onclose('io client disconnect');\n          }\n          return this;\n        };\n\n        /**\n         * Sets the compress flag.\n         *\n         * @param {Boolean} if `true`, compresses the sending data\n         * @return {Socket} self\n         * @api public\n         */\n\n        Socket.prototype.compress = function (compress) {\n          this.flags = this.flags || {};\n          this.flags.compress = compress;\n          return this;\n        };\n      }, { \"./on\": 33, \"component-bind\": 37, \"component-emitter\": 38, \"debug\": 39, \"has-binary\": 41, \"socket.io-parser\": 47, \"to-array\": 51 }], 35: [function (_dereq_, module, exports) {\n        (function (global) {\n\n          /**\n           * Module dependencies.\n           */\n\n          var parseuri = _dereq_('parseuri');\n          var debug = _dereq_('debug')('socket.io-client:url');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = url;\n\n          /**\n           * URL parser.\n           *\n           * @param {String} url\n           * @param {Object} An object meant to mimic window.location.\n           *                 Defaults to window.location.\n           * @api public\n           */\n\n          function url(uri, loc) {\n            var obj = uri;\n\n            // default to window.location\n            var loc = loc || global.location;\n            if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n            // relative path support\n            if ('string' == typeof uri) {\n              if ('/' == uri.charAt(0)) {\n                if ('/' == uri.charAt(1)) {\n                  uri = loc.protocol + uri;\n                } else {\n                  uri = loc.host + uri;\n                }\n              }\n\n              if (!/^(https?|wss?):\\/\\//.test(uri)) {\n                debug('protocol-less url %s', uri);\n                if ('undefined' != typeof loc) {\n                  uri = loc.protocol + '//' + uri;\n                } else {\n                  uri = 'https://' + uri;\n                }\n              }\n\n              // parse\n              debug('parse %s', uri);\n              obj = parseuri(uri);\n            }\n\n            // make sure we treat `localhost:80` and `localhost` equally\n            if (!obj.port) {\n              if (/^(http|ws)$/.test(obj.protocol)) {\n                obj.port = '80';\n              } else if (/^(http|ws)s$/.test(obj.protocol)) {\n                obj.port = '443';\n              }\n            }\n\n            obj.path = obj.path || '/';\n\n            var ipv6 = obj.host.indexOf(':') !== -1;\n            var host = ipv6 ? '[' + obj.host + ']' : obj.host;\n\n            // define unique id\n            obj.id = obj.protocol + '://' + host + ':' + obj.port;\n            // define href\n            obj.href = obj.protocol + '://' + host + (loc && loc.port == obj.port ? '' : ':' + obj.port);\n\n            return obj;\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"debug\": 39, \"parseuri\": 45 }], 36: [function (_dereq_, module, exports) {\n\n        /**\n         * Expose `Backoff`.\n         */\n\n        module.exports = Backoff;\n\n        /**\n         * Initialize backoff timer with `opts`.\n         *\n         * - `min` initial timeout in milliseconds [100]\n         * - `max` max timeout [10000]\n         * - `jitter` [0]\n         * - `factor` [2]\n         *\n         * @param {Object} opts\n         * @api public\n         */\n\n        function Backoff(opts) {\n          opts = opts || {};\n          this.ms = opts.min || 100;\n          this.max = opts.max || 10000;\n          this.factor = opts.factor || 2;\n          this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n          this.attempts = 0;\n        }\n\n        /**\n         * Return the backoff duration.\n         *\n         * @return {Number}\n         * @api public\n         */\n\n        Backoff.prototype.duration = function () {\n          var ms = this.ms * Math.pow(this.factor, this.attempts++);\n          if (this.jitter) {\n            var rand = Math.random();\n            var deviation = Math.floor(rand * this.jitter * ms);\n            ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n          }\n          return Math.min(ms, this.max) | 0;\n        };\n\n        /**\n         * Reset the number of attempts.\n         *\n         * @api public\n         */\n\n        Backoff.prototype.reset = function () {\n          this.attempts = 0;\n        };\n\n        /**\n         * Set the minimum duration\n         *\n         * @api public\n         */\n\n        Backoff.prototype.setMin = function (min) {\n          this.ms = min;\n        };\n\n        /**\n         * Set the maximum duration\n         *\n         * @api public\n         */\n\n        Backoff.prototype.setMax = function (max) {\n          this.max = max;\n        };\n\n        /**\n         * Set the jitter\n         *\n         * @api public\n         */\n\n        Backoff.prototype.setJitter = function (jitter) {\n          this.jitter = jitter;\n        };\n      }, {}], 37: [function (_dereq_, module, exports) {\n        /**\n         * Slice reference.\n         */\n\n        var slice = [].slice;\n\n        /**\n         * Bind `obj` to `fn`.\n         *\n         * @param {Object} obj\n         * @param {Function|String} fn or string\n         * @return {Function}\n         * @api public\n         */\n\n        module.exports = function (obj, fn) {\n          if ('string' == typeof fn) fn = obj[fn];\n          if ('function' != typeof fn) throw new Error('bind() requires a function');\n          var args = slice.call(arguments, 2);\n          return function () {\n            return fn.apply(obj, args.concat(slice.call(arguments)));\n          };\n        };\n      }, {}], 38: [function (_dereq_, module, exports) {\n\n        /**\n         * Expose `Emitter`.\n         */\n\n        module.exports = Emitter;\n\n        /**\n         * Initialize a new `Emitter`.\n         *\n         * @api public\n         */\n\n        function Emitter(obj) {\n          if (obj) return mixin(obj);\n        };\n\n        /**\n         * Mixin the emitter properties.\n         *\n         * @param {Object} obj\n         * @return {Object}\n         * @api private\n         */\n\n        function mixin(obj) {\n          for (var key in Emitter.prototype) {\n            obj[key] = Emitter.prototype[key];\n          }\n          return obj;\n        }\n\n        /**\n         * Listen on the given `event` with `fn`.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {};\n          (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);\n          return this;\n        };\n\n        /**\n         * Adds an `event` listener that will be invoked a single\n         * time then automatically removed.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.once = function (event, fn) {\n          function on() {\n            this.off(event, on);\n            fn.apply(this, arguments);\n          }\n\n          on.fn = fn;\n          this.on(event, on);\n          return this;\n        };\n\n        /**\n         * Remove the given callback for `event` or all\n         * registered callbacks.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */\n\n        Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {};\n\n          // all\n          if (0 == arguments.length) {\n            this._callbacks = {};\n            return this;\n          }\n\n          // specific event\n          var callbacks = this._callbacks['$' + event];\n          if (!callbacks) return this;\n\n          // remove all handlers\n          if (1 == arguments.length) {\n            delete this._callbacks['$' + event];\n            return this;\n          }\n\n          // remove specific handler\n          var cb;\n          for (var i = 0; i < callbacks.length; i++) {\n            cb = callbacks[i];\n            if (cb === fn || cb.fn === fn) {\n              callbacks.splice(i, 1);\n              break;\n            }\n          }\n          return this;\n        };\n\n        /**\n         * Emit `event` with the given args.\n         *\n         * @param {String} event\n         * @param {Mixed} ...\n         * @return {Emitter}\n         */\n\n        Emitter.prototype.emit = function (event) {\n          this._callbacks = this._callbacks || {};\n          var args = [].slice.call(arguments, 1),\n              callbacks = this._callbacks['$' + event];\n\n          if (callbacks) {\n            callbacks = callbacks.slice(0);\n            for (var i = 0, len = callbacks.length; i < len; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n\n          return this;\n        };\n\n        /**\n         * Return array of callbacks for `event`.\n         *\n         * @param {String} event\n         * @return {Array}\n         * @api public\n         */\n\n        Emitter.prototype.listeners = function (event) {\n          this._callbacks = this._callbacks || {};\n          return this._callbacks['$' + event] || [];\n        };\n\n        /**\n         * Check if this emitter has `event` handlers.\n         *\n         * @param {String} event\n         * @return {Boolean}\n         * @api public\n         */\n\n        Emitter.prototype.hasListeners = function (event) {\n          return !!this.listeners(event).length;\n        };\n      }, {}], 39: [function (_dereq_, module, exports) {\n        arguments[4][17][0].apply(exports, arguments);\n      }, { \"./debug\": 40, \"dup\": 17 }], 40: [function (_dereq_, module, exports) {\n        arguments[4][18][0].apply(exports, arguments);\n      }, { \"dup\": 18, \"ms\": 44 }], 41: [function (_dereq_, module, exports) {\n        (function (global) {\n\n          /*\n           * Module requirements.\n           */\n\n          var isArray = _dereq_('isarray');\n\n          /**\n           * Module exports.\n           */\n\n          module.exports = hasBinary;\n\n          /**\n           * Checks for binary data.\n           *\n           * Right now only Buffer and ArrayBuffer are supported..\n           *\n           * @param {Object} anything\n           * @api public\n           */\n\n          function hasBinary(data) {\n\n            function _hasBinary(obj) {\n              if (!obj) return false;\n\n              if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {\n                return true;\n              }\n\n              if (isArray(obj)) {\n                for (var i = 0; i < obj.length; i++) {\n                  if (_hasBinary(obj[i])) {\n                    return true;\n                  }\n                }\n              } else if (obj && 'object' == (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj))) {\n                // see: https://github.com/Automattic/has-binary/pull/4\n                if (obj.toJSON && 'function' == typeof obj.toJSON) {\n                  obj = obj.toJSON();\n                }\n\n                for (var key in obj) {\n                  if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            }\n\n            return _hasBinary(data);\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"isarray\": 43 }], 42: [function (_dereq_, module, exports) {\n        arguments[4][23][0].apply(exports, arguments);\n      }, { \"dup\": 23 }], 43: [function (_dereq_, module, exports) {\n        arguments[4][24][0].apply(exports, arguments);\n      }, { \"dup\": 24 }], 44: [function (_dereq_, module, exports) {\n        arguments[4][25][0].apply(exports, arguments);\n      }, { \"dup\": 25 }], 45: [function (_dereq_, module, exports) {\n        arguments[4][28][0].apply(exports, arguments);\n      }, { \"dup\": 28 }], 46: [function (_dereq_, module, exports) {\n        (function (global) {\n          /*global Blob,File*/\n\n          /**\n           * Module requirements\n           */\n\n          var isArray = _dereq_('isarray');\n          var isBuf = _dereq_('./is-buffer');\n\n          /**\n           * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n           * Anything with blobs or files should be fed through removeBlobs before coming\n           * here.\n           *\n           * @param {Object} packet - socket.io event packet\n           * @return {Object} with deconstructed packet and list of buffers\n           * @api public\n           */\n\n          exports.deconstructPacket = function (packet) {\n            var buffers = [];\n            var packetData = packet.data;\n\n            function _deconstructPacket(data) {\n              if (!data) return data;\n\n              if (isBuf(data)) {\n                var placeholder = { _placeholder: true, num: buffers.length };\n                buffers.push(data);\n                return placeholder;\n              } else if (isArray(data)) {\n                var newData = new Array(data.length);\n                for (var i = 0; i < data.length; i++) {\n                  newData[i] = _deconstructPacket(data[i]);\n                }\n                return newData;\n              } else if ('object' == (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) && !(data instanceof Date)) {\n                var newData = {};\n                for (var key in data) {\n                  newData[key] = _deconstructPacket(data[key]);\n                }\n                return newData;\n              }\n              return data;\n            }\n\n            var pack = packet;\n            pack.data = _deconstructPacket(packetData);\n            pack.attachments = buffers.length; // number of binary 'attachments'\n            return { packet: pack, buffers: buffers };\n          };\n\n          /**\n           * Reconstructs a binary packet from its placeholder packet and buffers\n           *\n           * @param {Object} packet - event packet with placeholders\n           * @param {Array} buffers - binary buffers to put in placeholder positions\n           * @return {Object} reconstructed packet\n           * @api public\n           */\n\n          exports.reconstructPacket = function (packet, buffers) {\n            var curPlaceHolder = 0;\n\n            function _reconstructPacket(data) {\n              if (data && data._placeholder) {\n                var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n                return buf;\n              } else if (isArray(data)) {\n                for (var i = 0; i < data.length; i++) {\n                  data[i] = _reconstructPacket(data[i]);\n                }\n                return data;\n              } else if (data && 'object' == (typeof data === \"undefined\" ? \"undefined\" : _typeof(data))) {\n                for (var key in data) {\n                  data[key] = _reconstructPacket(data[key]);\n                }\n                return data;\n              }\n              return data;\n            }\n\n            packet.data = _reconstructPacket(packet.data);\n            packet.attachments = undefined; // no longer useful\n            return packet;\n          };\n\n          /**\n           * Asynchronously removes Blobs or Files from data via\n           * FileReader's readAsArrayBuffer method. Used before encoding\n           * data as msgpack. Calls callback with the blobless data.\n           *\n           * @param {Object} data\n           * @param {Function} callback\n           * @api private\n           */\n\n          exports.removeBlobs = function (data, callback) {\n            function _removeBlobs(obj, curKey, containingObject) {\n              if (!obj) return obj;\n\n              // convert any blob\n              if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {\n                pendingBlobs++;\n\n                // async filereader\n                var fileReader = new FileReader();\n                fileReader.onload = function () {\n                  // this.result == arraybuffer\n                  if (containingObject) {\n                    containingObject[curKey] = this.result;\n                  } else {\n                    bloblessData = this.result;\n                  }\n\n                  // if nothing pending its callback time\n                  if (! --pendingBlobs) {\n                    callback(bloblessData);\n                  }\n                };\n\n                fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n              } else if (isArray(obj)) {\n                // handle array\n                for (var i = 0; i < obj.length; i++) {\n                  _removeBlobs(obj[i], i, obj);\n                }\n              } else if (obj && 'object' == (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) && !isBuf(obj)) {\n                // and object\n                for (var key in obj) {\n                  _removeBlobs(obj[key], key, obj);\n                }\n              }\n            }\n\n            var pendingBlobs = 0;\n            var bloblessData = data;\n            _removeBlobs(bloblessData);\n            if (!pendingBlobs) {\n              callback(bloblessData);\n            }\n          };\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, { \"./is-buffer\": 48, \"isarray\": 43 }], 47: [function (_dereq_, module, exports) {\n\n        /**\n         * Module dependencies.\n         */\n\n        var debug = _dereq_('debug')('socket.io-parser');\n        var json = _dereq_('json3');\n        var isArray = _dereq_('isarray');\n        var Emitter = _dereq_('component-emitter');\n        var binary = _dereq_('./binary');\n        var isBuf = _dereq_('./is-buffer');\n\n        /**\n         * Protocol version.\n         *\n         * @api public\n         */\n\n        exports.protocol = 4;\n\n        /**\n         * Packet types.\n         *\n         * @api public\n         */\n\n        exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'BINARY_EVENT', 'ACK', 'BINARY_ACK', 'ERROR'];\n\n        /**\n         * Packet type `connect`.\n         *\n         * @api public\n         */\n\n        exports.CONNECT = 0;\n\n        /**\n         * Packet type `disconnect`.\n         *\n         * @api public\n         */\n\n        exports.DISCONNECT = 1;\n\n        /**\n         * Packet type `event`.\n         *\n         * @api public\n         */\n\n        exports.EVENT = 2;\n\n        /**\n         * Packet type `ack`.\n         *\n         * @api public\n         */\n\n        exports.ACK = 3;\n\n        /**\n         * Packet type `error`.\n         *\n         * @api public\n         */\n\n        exports.ERROR = 4;\n\n        /**\n         * Packet type 'binary event'\n         *\n         * @api public\n         */\n\n        exports.BINARY_EVENT = 5;\n\n        /**\n         * Packet type `binary ack`. For acks with binary arguments.\n         *\n         * @api public\n         */\n\n        exports.BINARY_ACK = 6;\n\n        /**\n         * Encoder constructor.\n         *\n         * @api public\n         */\n\n        exports.Encoder = Encoder;\n\n        /**\n         * Decoder constructor.\n         *\n         * @api public\n         */\n\n        exports.Decoder = Decoder;\n\n        /**\n         * A socket.io Encoder instance\n         *\n         * @api public\n         */\n\n        function Encoder() {}\n\n        /**\n         * Encode a packet as a single string if non-binary, or as a\n         * buffer sequence, depending on packet type.\n         *\n         * @param {Object} obj - packet object\n         * @param {Function} callback - function to handle encodings (likely engine.write)\n         * @return Calls callback with Array of encodings\n         * @api public\n         */\n\n        Encoder.prototype.encode = function (obj, callback) {\n          debug('encoding packet %j', obj);\n\n          if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n            encodeAsBinary(obj, callback);\n          } else {\n            var encoding = encodeAsString(obj);\n            callback([encoding]);\n          }\n        };\n\n        /**\n         * Encode packet as string.\n         *\n         * @param {Object} packet\n         * @return {String} encoded\n         * @api private\n         */\n\n        function encodeAsString(obj) {\n          var str = '';\n          var nsp = false;\n\n          // first is type\n          str += obj.type;\n\n          // attachments if we have them\n          if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n            str += obj.attachments;\n            str += '-';\n          }\n\n          // if we have a namespace other than `/`\n          // we append it followed by a comma `,`\n          if (obj.nsp && '/' != obj.nsp) {\n            nsp = true;\n            str += obj.nsp;\n          }\n\n          // immediately followed by the id\n          if (null != obj.id) {\n            if (nsp) {\n              str += ',';\n              nsp = false;\n            }\n            str += obj.id;\n          }\n\n          // json data\n          if (null != obj.data) {\n            if (nsp) str += ',';\n            str += json.stringify(obj.data);\n          }\n\n          debug('encoded %j as %s', obj, str);\n          return str;\n        }\n\n        /**\n         * Encode packet as 'buffer sequence' by removing blobs, and\n         * deconstructing packet into object with placeholders and\n         * a list of buffers.\n         *\n         * @param {Object} packet\n         * @return {Buffer} encoded\n         * @api private\n         */\n\n        function encodeAsBinary(obj, callback) {\n\n          function writeEncoding(bloblessData) {\n            var deconstruction = binary.deconstructPacket(bloblessData);\n            var pack = encodeAsString(deconstruction.packet);\n            var buffers = deconstruction.buffers;\n\n            buffers.unshift(pack); // add packet info to beginning of data list\n            callback(buffers); // write all the buffers\n          }\n\n          binary.removeBlobs(obj, writeEncoding);\n        }\n\n        /**\n         * A socket.io Decoder instance\n         *\n         * @return {Object} decoder\n         * @api public\n         */\n\n        function Decoder() {\n          this.reconstructor = null;\n        }\n\n        /**\n         * Mix in `Emitter` with Decoder.\n         */\n\n        Emitter(Decoder.prototype);\n\n        /**\n         * Decodes an ecoded packet string into packet JSON.\n         *\n         * @param {String} obj - encoded packet\n         * @return {Object} packet\n         * @api public\n         */\n\n        Decoder.prototype.add = function (obj) {\n          var packet;\n          if ('string' == typeof obj) {\n            packet = decodeString(obj);\n            if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {\n              // binary packet's json\n              this.reconstructor = new BinaryReconstructor(packet);\n\n              // no attachments, labeled binary but no binary data to follow\n              if (this.reconstructor.reconPack.attachments === 0) {\n                this.emit('decoded', packet);\n              }\n            } else {\n              // non-binary full packet\n              this.emit('decoded', packet);\n            }\n          } else if (isBuf(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n              throw new Error('got binary data when not reconstructing a packet');\n            } else {\n              packet = this.reconstructor.takeBinaryData(obj);\n              if (packet) {\n                // received final buffer\n                this.reconstructor = null;\n                this.emit('decoded', packet);\n              }\n            }\n          } else {\n            throw new Error('Unknown type: ' + obj);\n          }\n        };\n\n        /**\n         * Decode a packet String (JSON data)\n         *\n         * @param {String} str\n         * @return {Object} packet\n         * @api private\n         */\n\n        function decodeString(str) {\n          var p = {};\n          var i = 0;\n\n          // look up type\n          p.type = Number(str.charAt(0));\n          if (null == exports.types[p.type]) return error();\n\n          // look up attachments if type binary\n          if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n            var buf = '';\n            while (str.charAt(++i) != '-') {\n              buf += str.charAt(i);\n              if (i == str.length) break;\n            }\n            if (buf != Number(buf) || str.charAt(i) != '-') {\n              throw new Error('Illegal attachments');\n            }\n            p.attachments = Number(buf);\n          }\n\n          // look up namespace (if any)\n          if ('/' == str.charAt(i + 1)) {\n            p.nsp = '';\n            while (++i) {\n              var c = str.charAt(i);\n              if (',' == c) break;\n              p.nsp += c;\n              if (i == str.length) break;\n            }\n          } else {\n            p.nsp = '/';\n          }\n\n          // look up id\n          var next = str.charAt(i + 1);\n          if ('' !== next && Number(next) == next) {\n            p.id = '';\n            while (++i) {\n              var c = str.charAt(i);\n              if (null == c || Number(c) != c) {\n                --i;\n                break;\n              }\n              p.id += str.charAt(i);\n              if (i == str.length) break;\n            }\n            p.id = Number(p.id);\n          }\n\n          // look up json data\n          if (str.charAt(++i)) {\n            try {\n              p.data = json.parse(str.substr(i));\n            } catch (e) {\n              return error();\n            }\n          }\n\n          debug('decoded %s as %j', str, p);\n          return p;\n        }\n\n        /**\n         * Deallocates a parser's resources\n         *\n         * @api public\n         */\n\n        Decoder.prototype.destroy = function () {\n          if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n          }\n        };\n\n        /**\n         * A manager of a binary event's 'buffer sequence'. Should\n         * be constructed whenever a packet of type BINARY_EVENT is\n         * decoded.\n         *\n         * @param {Object} packet\n         * @return {BinaryReconstructor} initialized reconstructor\n         * @api private\n         */\n\n        function BinaryReconstructor(packet) {\n          this.reconPack = packet;\n          this.buffers = [];\n        }\n\n        /**\n         * Method to be called when binary data received from connection\n         * after a BINARY_EVENT packet.\n         *\n         * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n         * @return {null | Object} returns null if more binary data is expected or\n         *   a reconstructed packet object if all buffers have been received.\n         * @api private\n         */\n\n        BinaryReconstructor.prototype.takeBinaryData = function (binData) {\n          this.buffers.push(binData);\n          if (this.buffers.length == this.reconPack.attachments) {\n            // done with buffer list\n            var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n          }\n          return null;\n        };\n\n        /**\n         * Cleans up binary packet reconstruction variables.\n         *\n         * @api private\n         */\n\n        BinaryReconstructor.prototype.finishedReconstruction = function () {\n          this.reconPack = null;\n          this.buffers = [];\n        };\n\n        function error(data) {\n          return {\n            type: exports.ERROR,\n            data: 'parser error'\n          };\n        }\n      }, { \"./binary\": 46, \"./is-buffer\": 48, \"component-emitter\": 49, \"debug\": 39, \"isarray\": 43, \"json3\": 50 }], 48: [function (_dereq_, module, exports) {\n        (function (global) {\n\n          module.exports = isBuf;\n\n          /**\n           * Returns true if obj is a buffer or an arraybuffer.\n           *\n           * @api private\n           */\n\n          function isBuf(obj) {\n            return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;\n          }\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, {}], 49: [function (_dereq_, module, exports) {\n        arguments[4][15][0].apply(exports, arguments);\n      }, { \"dup\": 15 }], 50: [function (_dereq_, module, exports) {\n        (function (global) {\n          /*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\n          ;(function () {\n            // Detect the `define` function exposed by asynchronous module loaders. The\n            // strict `define` check is necessary for compatibility with `r.js`.\n            var isLoader = typeof define === \"function\" && define.amd;\n\n            // A set of types used to distinguish objects from primitives.\n            var objectTypes = {\n              \"function\": true,\n              \"object\": true\n            };\n\n            // Detect the `exports` object exposed by CommonJS implementations.\n            var freeExports = objectTypes[typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)] && exports && !exports.nodeType && exports;\n\n            // Use the `global` object exposed by Node (including Browserify via\n            // `insert-module-globals`), Narwhal, and Ringo as the default context,\n            // and the `window` object in browsers. Rhino exports a `global` function\n            // instead.\n            var root = objectTypes[typeof window === \"undefined\" ? \"undefined\" : _typeof(window)] && window || this,\n                freeGlobal = freeExports && objectTypes[typeof module === \"undefined\" ? \"undefined\" : _typeof(module)] && module && !module.nodeType && (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == \"object\" && global;\n\n            if (freeGlobal && (freeGlobal[\"global\"] === freeGlobal || freeGlobal[\"window\"] === freeGlobal || freeGlobal[\"self\"] === freeGlobal)) {\n              root = freeGlobal;\n            }\n\n            // Public: Initializes JSON 3 using the given `context` object, attaching the\n            // `stringify` and `parse` functions to the specified `exports` object.\n            function runInContext(context, exports) {\n              context || (context = root[\"Object\"]());\n              exports || (exports = root[\"Object\"]());\n\n              // Native constructor aliases.\n              var Number = context[\"Number\"] || root[\"Number\"],\n                  String = context[\"String\"] || root[\"String\"],\n                  Object = context[\"Object\"] || root[\"Object\"],\n                  Date = context[\"Date\"] || root[\"Date\"],\n                  SyntaxError = context[\"SyntaxError\"] || root[\"SyntaxError\"],\n                  TypeError = context[\"TypeError\"] || root[\"TypeError\"],\n                  Math = context[\"Math\"] || root[\"Math\"],\n                  nativeJSON = context[\"JSON\"] || root[\"JSON\"];\n\n              // Delegate to the native `stringify` and `parse` implementations.\n              if ((typeof nativeJSON === \"undefined\" ? \"undefined\" : _typeof(nativeJSON)) == \"object\" && nativeJSON) {\n                exports.stringify = nativeJSON.stringify;\n                exports.parse = nativeJSON.parse;\n              }\n\n              // Convenience aliases.\n              var objectProto = Object.prototype,\n                  getClass = objectProto.toString,\n                  _isProperty,\n                  _forEach,\n                  undef;\n\n              // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n              var isExtended = new Date(-3509827334573292);\n              try {\n                // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n                // results for certain dates in Opera >= 10.53.\n                isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n                // Safari < 2.0.2 stores the internal millisecond time value correctly,\n                // but clips the values returned by the date methods to the range of\n                // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n                isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n              } catch (exception) {}\n\n              // Internal: Determines whether the native `JSON.stringify` and `parse`\n              // implementations are spec-compliant. Based on work by Ken Snyder.\n              function has(name) {\n                if (has[name] !== undef) {\n                  // Return cached feature test result.\n                  return has[name];\n                }\n                var isSupported;\n                if (name == \"bug-string-char-index\") {\n                  // IE <= 7 doesn't support accessing string characters using square\n                  // bracket notation. IE 8 only supports this for primitives.\n                  isSupported = \"a\"[0] != \"a\";\n                } else if (name == \"json\") {\n                  // Indicates whether both `JSON.stringify` and `JSON.parse` are\n                  // supported.\n                  isSupported = has(\"json-stringify\") && has(\"json-parse\");\n                } else {\n                  var value,\n                      serialized = \"{\\\"a\\\":[1,true,false,null,\\\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\\\"]}\";\n                  // Test `JSON.stringify`.\n                  if (name == \"json-stringify\") {\n                    var stringify = exports.stringify,\n                        stringifySupported = typeof stringify == \"function\" && isExtended;\n                    if (stringifySupported) {\n                      // A test function object with a custom `toJSON` method.\n                      (value = function value() {\n                        return 1;\n                      }).toJSON = value;\n                      try {\n                        stringifySupported =\n                        // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                        // primitives as object literals.\n                        stringify(0) === \"0\" &&\n                        // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                        // literals.\n                        stringify(new Number()) === \"0\" && stringify(new String()) == '\"\"' &&\n                        // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                        // does not define a canonical JSON representation (this applies to\n                        // objects with `toJSON` properties as well, *unless* they are nested\n                        // within an object or array).\n                        stringify(getClass) === undef &&\n                        // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                        // FF 3.1b3 pass this test.\n                        stringify(undef) === undef &&\n                        // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                        // respectively, if the value is omitted entirely.\n                        stringify() === undef &&\n                        // FF 3.1b1, 2 throw an error if the given value is not a number,\n                        // string, array, object, Boolean, or `null` literal. This applies to\n                        // objects with custom `toJSON` methods as well, unless they are nested\n                        // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                        // methods entirely.\n                        stringify(value) === \"1\" && stringify([value]) == \"[1]\" &&\n                        // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                        // `\"[null]\"`.\n                        stringify([undef]) == \"[null]\" &&\n                        // YUI 3.0.0b1 fails to serialize `null` literals.\n                        stringify(null) == \"null\" &&\n                        // FF 3.1b1, 2 halts serialization if an array contains a function:\n                        // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                        // elides non-JSON values from objects and arrays, unless they\n                        // define custom `toJSON` methods.\n                        stringify([undef, getClass, null]) == \"[null,null,null]\" &&\n                        // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                        // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                        stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                        // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                        stringify(null, value) === \"1\" && stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" &&\n                        // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n                        // serialize extended years.\n                        stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n                        // The milliseconds are optional in ES 5, but required in 5.1.\n                        stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n                        // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n                        // four-digit years instead of six-digit years. Credits: @Yaffle.\n                        stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n                        // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n                        // values less than 1000. Credits: @Yaffle.\n                        stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n                      } catch (exception) {\n                        stringifySupported = false;\n                      }\n                    }\n                    isSupported = stringifySupported;\n                  }\n                  // Test `JSON.parse`.\n                  if (name == \"json-parse\") {\n                    var parse = exports.parse;\n                    if (typeof parse == \"function\") {\n                      try {\n                        // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n                        // Conforming implementations should also coerce the initial argument to\n                        // a string prior to parsing.\n                        if (parse(\"0\") === 0 && !parse(false)) {\n                          // Simple parsing test.\n                          value = parse(serialized);\n                          var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                          if (parseSupported) {\n                            try {\n                              // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                              parseSupported = !parse('\"\\t\"');\n                            } catch (exception) {}\n                            if (parseSupported) {\n                              try {\n                                // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                                // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                                // certain octal literals.\n                                parseSupported = parse(\"01\") !== 1;\n                              } catch (exception) {}\n                            }\n                            if (parseSupported) {\n                              try {\n                                // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                                // points. These environments, along with FF 3.1b1 and 2,\n                                // also allow trailing commas in JSON objects and arrays.\n                                parseSupported = parse(\"1.\") !== 1;\n                              } catch (exception) {}\n                            }\n                          }\n                        }\n                      } catch (exception) {\n                        parseSupported = false;\n                      }\n                    }\n                    isSupported = parseSupported;\n                  }\n                }\n                return has[name] = !!isSupported;\n              }\n\n              if (!has(\"json\")) {\n                // Common `[[Class]]` name aliases.\n                var functionClass = \"[object Function]\",\n                    dateClass = \"[object Date]\",\n                    numberClass = \"[object Number]\",\n                    stringClass = \"[object String]\",\n                    arrayClass = \"[object Array]\",\n                    booleanClass = \"[object Boolean]\";\n\n                // Detect incomplete support for accessing string characters by index.\n                var charIndexBuggy = has(\"bug-string-char-index\");\n\n                // Define additional utility methods if the `Date` methods are buggy.\n                if (!isExtended) {\n                  var floor = Math.floor;\n                  // A mapping between the months of the year and the number of days between\n                  // January 1st and the first of the respective month.\n                  var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n                  // Internal: Calculates the number of days between the Unix epoch and the\n                  // first day of the given month.\n                  var getDay = function getDay(year, month) {\n                    return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n                  };\n                }\n\n                // Internal: Determines if a property is a direct property of the given\n                // object. Delegates to the native `Object#hasOwnProperty` method.\n                if (!(_isProperty = objectProto.hasOwnProperty)) {\n                  _isProperty = function isProperty(property) {\n                    var members = {},\n                        constructor;\n                    if ((members.__proto__ = null, members.__proto__ = {\n                      // The *proto* property cannot be set multiple times in recent\n                      // versions of Firefox and SeaMonkey.\n                      \"toString\": 1\n                    }, members).toString != getClass) {\n                      // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n                      // supports the mutable *proto* property.\n                      _isProperty = function isProperty(property) {\n                        // Capture and break the object's prototype chain (see section 8.6.2\n                        // of the ES 5.1 spec). The parenthesized expression prevents an\n                        // unsafe transformation by the Closure Compiler.\n                        var original = this.__proto__,\n                            result = property in (this.__proto__ = null, this);\n                        // Restore the original prototype chain.\n                        this.__proto__ = original;\n                        return result;\n                      };\n                    } else {\n                      // Capture a reference to the top-level `Object` constructor.\n                      constructor = members.constructor;\n                      // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n                      // other environments.\n                      _isProperty = function isProperty(property) {\n                        var parent = (this.constructor || constructor).prototype;\n                        return property in this && !(property in parent && this[property] === parent[property]);\n                      };\n                    }\n                    members = null;\n                    return _isProperty.call(this, property);\n                  };\n                }\n\n                // Internal: Normalizes the `for...in` iteration algorithm across\n                // environments. Each enumerated key is yielded to a `callback` function.\n                _forEach = function forEach(object, callback) {\n                  var size = 0,\n                      Properties,\n                      members,\n                      property;\n\n                  // Tests for bugs in the current environment's `for...in` algorithm. The\n                  // `valueOf` property inherits the non-enumerable flag from\n                  // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n                  (Properties = function Properties() {\n                    this.valueOf = 0;\n                  }).prototype.valueOf = 0;\n\n                  // Iterate over a new instance of the `Properties` class.\n                  members = new Properties();\n                  for (property in members) {\n                    // Ignore all properties inherited from `Object.prototype`.\n                    if (_isProperty.call(members, property)) {\n                      size++;\n                    }\n                  }\n                  Properties = members = null;\n\n                  // Normalize the iteration algorithm.\n                  if (!size) {\n                    // A list of non-enumerable properties inherited from `Object.prototype`.\n                    members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n                    // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n                    // properties.\n                    _forEach = function forEach(object, callback) {\n                      var isFunction = getClass.call(object) == functionClass,\n                          property,\n                          length;\n                      var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[_typeof(object.hasOwnProperty)] && object.hasOwnProperty || _isProperty;\n                      for (property in object) {\n                        // Gecko <= 1.0 enumerates the `prototype` property of functions under\n                        // certain conditions; IE does not.\n                        if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                          callback(property);\n                        }\n                      }\n                      // Manually invoke the callback for each non-enumerable property.\n                      for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}\n                    };\n                  } else if (size == 2) {\n                    // Safari <= 2.0.4 enumerates shadowed properties twice.\n                    _forEach = function forEach(object, callback) {\n                      // Create a set of iterated properties.\n                      var members = {},\n                          isFunction = getClass.call(object) == functionClass,\n                          property;\n                      for (property in object) {\n                        // Store each property name to prevent double enumeration. The\n                        // `prototype` property of functions is not enumerated due to cross-\n                        // environment inconsistencies.\n                        if (!(isFunction && property == \"prototype\") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {\n                          callback(property);\n                        }\n                      }\n                    };\n                  } else {\n                    // No bugs detected; use the standard `for...in` algorithm.\n                    _forEach = function forEach(object, callback) {\n                      var isFunction = getClass.call(object) == functionClass,\n                          property,\n                          isConstructor;\n                      for (property in object) {\n                        if (!(isFunction && property == \"prototype\") && _isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                          callback(property);\n                        }\n                      }\n                      // Manually invoke the callback for the `constructor` property due to\n                      // cross-environment inconsistencies.\n                      if (isConstructor || _isProperty.call(object, property = \"constructor\")) {\n                        callback(property);\n                      }\n                    };\n                  }\n                  return _forEach(object, callback);\n                };\n\n                // Public: Serializes a JavaScript `value` as a JSON string. The optional\n                // `filter` argument may specify either a function that alters how object and\n                // array members are serialized, or an array of strings and numbers that\n                // indicates which properties should be serialized. The optional `width`\n                // argument may be either a string or number that specifies the indentation\n                // level of the output.\n                if (!has(\"json-stringify\")) {\n                  // Internal: A map of control characters and their escaped equivalents.\n                  var Escapes = {\n                    92: \"\\\\\\\\\",\n                    34: '\\\\\"',\n                    8: \"\\\\b\",\n                    12: \"\\\\f\",\n                    10: \"\\\\n\",\n                    13: \"\\\\r\",\n                    9: \"\\\\t\"\n                  };\n\n                  // Internal: Converts `value` into a zero-padded string such that its\n                  // length is at least equal to `width`. The `width` must be <= 6.\n                  var leadingZeroes = \"000000\";\n                  var toPaddedString = function toPaddedString(width, value) {\n                    // The `|| 0` expression is necessary to work around a bug in\n                    // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n                    return (leadingZeroes + (value || 0)).slice(-width);\n                  };\n\n                  // Internal: Double-quotes a string `value`, replacing all ASCII control\n                  // characters (characters with code unit values between 0 and 31) with\n                  // their escaped equivalents. This is an implementation of the\n                  // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n                  var unicodePrefix = \"\\\\u00\";\n                  var quote = function quote(value) {\n                    var result = '\"',\n                        index = 0,\n                        length = value.length,\n                        useCharIndex = !charIndexBuggy || length > 10;\n                    var symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\n                    for (; index < length; index++) {\n                      var charCode = value.charCodeAt(index);\n                      // If the character is a control character, append its Unicode or\n                      // shorthand escape sequence; otherwise, append the character as-is.\n                      switch (charCode) {\n                        case 8:case 9:case 10:case 12:case 13:case 34:case 92:\n                          result += Escapes[charCode];\n                          break;\n                        default:\n                          if (charCode < 32) {\n                            result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                            break;\n                          }\n                          result += useCharIndex ? symbols[index] : value.charAt(index);\n                      }\n                    }\n                    return result + '\"';\n                  };\n\n                  // Internal: Recursively serializes an object. Implements the\n                  // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n                  var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {\n                    var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n                    try {\n                      // Necessary for host object support.\n                      value = object[property];\n                    } catch (exception) {}\n                    if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) == \"object\" && value) {\n                      className = getClass.call(value);\n                      if (className == dateClass && !_isProperty.call(value, \"toJSON\")) {\n                        if (value > -1 / 0 && value < 1 / 0) {\n                          // Dates are serialized according to the `Date#toJSON` method\n                          // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n                          // for the ISO 8601 date time string format.\n                          if (getDay) {\n                            // Manually compute the year, month, date, hours, minutes,\n                            // seconds, and milliseconds if the `getUTC*` methods are\n                            // buggy. Adapted from @Yaffle's `date-shim` project.\n                            date = floor(value / 864e5);\n                            for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}\n                            for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}\n                            date = 1 + date - getDay(year, month);\n                            // The `time` value specifies the time within the day (see ES\n                            // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                            // to compute `A modulo B`, as the `%` operator does not\n                            // correspond to the `modulo` operation for negative numbers.\n                            time = (value % 864e5 + 864e5) % 864e5;\n                            // The hours, minutes, seconds, and milliseconds are obtained by\n                            // decomposing the time within the day. See section 15.9.1.10.\n                            hours = floor(time / 36e5) % 24;\n                            minutes = floor(time / 6e4) % 60;\n                            seconds = floor(time / 1e3) % 60;\n                            milliseconds = time % 1e3;\n                          } else {\n                            year = value.getUTCFullYear();\n                            month = value.getUTCMonth();\n                            date = value.getUTCDate();\n                            hours = value.getUTCHours();\n                            minutes = value.getUTCMinutes();\n                            seconds = value.getUTCSeconds();\n                            milliseconds = value.getUTCMilliseconds();\n                          }\n                          // Serialize extended years correctly.\n                          value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                          // Months, dates, hours, minutes, and seconds should have two\n                          // digits; milliseconds should have three.\n                          \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                          // Milliseconds are optional in ES 5.0, but required in 5.1.\n                          \".\" + toPaddedString(3, milliseconds) + \"Z\";\n                        } else {\n                          value = null;\n                        }\n                      } else if (typeof value.toJSON == \"function\" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, \"toJSON\"))) {\n                        // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n                        // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n                        // ignores all `toJSON` methods on these objects unless they are\n                        // defined directly on an instance.\n                        value = value.toJSON(property);\n                      }\n                    }\n                    if (callback) {\n                      // If a replacement function was provided, call it to obtain the value\n                      // for serialization.\n                      value = callback.call(object, property, value);\n                    }\n                    if (value === null) {\n                      return \"null\";\n                    }\n                    className = getClass.call(value);\n                    if (className == booleanClass) {\n                      // Booleans are represented literally.\n                      return \"\" + value;\n                    } else if (className == numberClass) {\n                      // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n                      // `\"null\"`.\n                      return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n                    } else if (className == stringClass) {\n                      // Strings are double-quoted and escaped.\n                      return quote(\"\" + value);\n                    }\n                    // Recursively serialize objects and arrays.\n                    if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) == \"object\") {\n                      // Check for cyclic structures. This is a linear search; performance\n                      // is inversely proportional to the number of unique nested objects.\n                      for (length = stack.length; length--;) {\n                        if (stack[length] === value) {\n                          // Cyclic structures cannot be serialized by `JSON.stringify`.\n                          throw TypeError();\n                        }\n                      }\n                      // Add the object to the stack of traversed objects.\n                      stack.push(value);\n                      results = [];\n                      // Save the current indentation level and indent one additional level.\n                      prefix = indentation;\n                      indentation += whitespace;\n                      if (className == arrayClass) {\n                        // Recursively serialize array elements.\n                        for (index = 0, length = value.length; index < length; index++) {\n                          element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                          results.push(element === undef ? \"null\" : element);\n                        }\n                        result = results.length ? whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : \"[\" + results.join(\",\") + \"]\" : \"[]\";\n                      } else {\n                        // Recursively serialize object members. Members are selected from\n                        // either a user-specified list of property names, or the object\n                        // itself.\n                        _forEach(properties || value, function (property) {\n                          var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                          if (element !== undef) {\n                            // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                            // is not the empty string, let `member` {quote(property) + \":\"}\n                            // be the concatenation of `member` and the `space` character.\"\n                            // The \"`space` character\" refers to the literal space\n                            // character, not the `space` {width} argument provided to\n                            // `JSON.stringify`.\n                            results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                          }\n                        });\n                        result = results.length ? whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : \"{\" + results.join(\",\") + \"}\" : \"{}\";\n                      }\n                      // Remove the object from the traversed object stack.\n                      stack.pop();\n                      return result;\n                    }\n                  };\n\n                  // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n                  exports.stringify = function (source, filter, width) {\n                    var whitespace, callback, properties, className;\n                    if (objectTypes[typeof filter === \"undefined\" ? \"undefined\" : _typeof(filter)] && filter) {\n                      if ((className = getClass.call(filter)) == functionClass) {\n                        callback = filter;\n                      } else if (className == arrayClass) {\n                        // Convert the property names array into a makeshift set.\n                        properties = {};\n                        for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}\n                      }\n                    }\n                    if (width) {\n                      if ((className = getClass.call(width)) == numberClass) {\n                        // Convert the `width` to an integer and create a string containing\n                        // `width` number of space characters.\n                        if ((width -= width % 1) > 0) {\n                          for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \") {}\n                        }\n                      } else if (className == stringClass) {\n                        whitespace = width.length <= 10 ? width : width.slice(0, 10);\n                      }\n                    }\n                    // Opera <= 7.54u2 discards the values associated with empty string keys\n                    // (`\"\"`) only if they are used directly within an object member list\n                    // (e.g., `!(\"\" in { \"\": 1})`).\n                    return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n                  };\n                }\n\n                // Public: Parses a JSON source string.\n                if (!has(\"json-parse\")) {\n                  var fromCharCode = String.fromCharCode;\n\n                  // Internal: A map of escaped control characters and their unescaped\n                  // equivalents.\n                  var Unescapes = {\n                    92: \"\\\\\",\n                    34: '\"',\n                    47: \"/\",\n                    98: \"\\b\",\n                    116: \"\\t\",\n                    110: \"\\n\",\n                    102: \"\\f\",\n                    114: \"\\r\"\n                  };\n\n                  // Internal: Stores the parser state.\n                  var Index, Source;\n\n                  // Internal: Resets the parser state and throws a `SyntaxError`.\n                  var abort = function abort() {\n                    Index = Source = null;\n                    throw SyntaxError();\n                  };\n\n                  // Internal: Returns the next token, or `\"$\"` if the parser has reached\n                  // the end of the source string. A token may be a string, number, `null`\n                  // literal, or Boolean literal.\n                  var lex = function lex() {\n                    var source = Source,\n                        length = source.length,\n                        value,\n                        begin,\n                        position,\n                        isSigned,\n                        charCode;\n                    while (Index < length) {\n                      charCode = source.charCodeAt(Index);\n                      switch (charCode) {\n                        case 9:case 10:case 13:case 32:\n                          // Skip whitespace tokens, including tabs, carriage returns, line\n                          // feeds, and space characters.\n                          Index++;\n                          break;\n                        case 123:case 125:case 91:case 93:case 58:case 44:\n                          // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                          // the current position.\n                          value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                          Index++;\n                          return value;\n                        case 34:\n                          // `\"` delimits a JSON string; advance to the next character and\n                          // begin parsing the string. String tokens are prefixed with the\n                          // sentinel `@` character to distinguish them from punctuators and\n                          // end-of-string tokens.\n                          for (value = \"@\", Index++; Index < length;) {\n                            charCode = source.charCodeAt(Index);\n                            if (charCode < 32) {\n                              // Unescaped ASCII control characters (those with a code unit\n                              // less than the space character) are not permitted.\n                              abort();\n                            } else if (charCode == 92) {\n                              // A reverse solidus (`\\`) marks the beginning of an escaped\n                              // control character (including `\"`, `\\`, and `/`) or Unicode\n                              // escape sequence.\n                              charCode = source.charCodeAt(++Index);\n                              switch (charCode) {\n                                case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:\n                                  // Revive escaped control characters.\n                                  value += Unescapes[charCode];\n                                  Index++;\n                                  break;\n                                case 117:\n                                  // `\\u` marks the beginning of a Unicode escape sequence.\n                                  // Advance to the first character and validate the\n                                  // four-digit code point.\n                                  begin = ++Index;\n                                  for (position = Index + 4; Index < position; Index++) {\n                                    charCode = source.charCodeAt(Index);\n                                    // A valid sequence comprises four hexdigits (case-\n                                    // insensitive) that form a single hexadecimal value.\n                                    if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                                      // Invalid Unicode escape sequence.\n                                      abort();\n                                    }\n                                  }\n                                  // Revive the escaped character.\n                                  value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                                  break;\n                                default:\n                                  // Invalid escape sequence.\n                                  abort();\n                              }\n                            } else {\n                              if (charCode == 34) {\n                                // An unescaped double-quote character marks the end of the\n                                // string.\n                                break;\n                              }\n                              charCode = source.charCodeAt(Index);\n                              begin = Index;\n                              // Optimize for the common case where a string is valid.\n                              while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                                charCode = source.charCodeAt(++Index);\n                              }\n                              // Append the string as-is.\n                              value += source.slice(begin, Index);\n                            }\n                          }\n                          if (source.charCodeAt(Index) == 34) {\n                            // Advance to the next character and return the revived string.\n                            Index++;\n                            return value;\n                          }\n                          // Unterminated string.\n                          abort();\n                        default:\n                          // Parse numbers and literals.\n                          begin = Index;\n                          // Advance past the negative sign, if one is specified.\n                          if (charCode == 45) {\n                            isSigned = true;\n                            charCode = source.charCodeAt(++Index);\n                          }\n                          // Parse an integer or floating-point value.\n                          if (charCode >= 48 && charCode <= 57) {\n                            // Leading zeroes are interpreted as octal literals.\n                            if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {\n                              // Illegal octal literal.\n                              abort();\n                            }\n                            isSigned = false;\n                            // Parse the integer component.\n                            for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {}\n                            // Floats cannot contain a leading decimal point; however, this\n                            // case is already accounted for by the parser.\n                            if (source.charCodeAt(Index) == 46) {\n                              position = ++Index;\n                              // Parse the decimal component.\n                              for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}\n                              if (position == Index) {\n                                // Illegal trailing decimal.\n                                abort();\n                              }\n                              Index = position;\n                            }\n                            // Parse exponents. The `e` denoting the exponent is\n                            // case-insensitive.\n                            charCode = source.charCodeAt(Index);\n                            if (charCode == 101 || charCode == 69) {\n                              charCode = source.charCodeAt(++Index);\n                              // Skip past the sign following the exponent, if one is\n                              // specified.\n                              if (charCode == 43 || charCode == 45) {\n                                Index++;\n                              }\n                              // Parse the exponential component.\n                              for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}\n                              if (position == Index) {\n                                // Illegal empty exponent.\n                                abort();\n                              }\n                              Index = position;\n                            }\n                            // Coerce the parsed value to a JavaScript number.\n                            return +source.slice(begin, Index);\n                          }\n                          // A negative sign may only precede numbers.\n                          if (isSigned) {\n                            abort();\n                          }\n                          // `true`, `false`, and `null` literals.\n                          if (source.slice(Index, Index + 4) == \"true\") {\n                            Index += 4;\n                            return true;\n                          } else if (source.slice(Index, Index + 5) == \"false\") {\n                            Index += 5;\n                            return false;\n                          } else if (source.slice(Index, Index + 4) == \"null\") {\n                            Index += 4;\n                            return null;\n                          }\n                          // Unrecognized token.\n                          abort();\n                      }\n                    }\n                    // Return the sentinel `$` character if the parser has reached the end\n                    // of the source string.\n                    return \"$\";\n                  };\n\n                  // Internal: Parses a JSON `value` token.\n                  var get = function get(value) {\n                    var results, hasMembers;\n                    if (value == \"$\") {\n                      // Unexpected end of input.\n                      abort();\n                    }\n                    if (typeof value == \"string\") {\n                      if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n                        // Remove the sentinel `@` character.\n                        return value.slice(1);\n                      }\n                      // Parse object and array literals.\n                      if (value == \"[\") {\n                        // Parses a JSON array, returning a new JavaScript array.\n                        results = [];\n                        for (;; hasMembers || (hasMembers = true)) {\n                          value = lex();\n                          // A closing square bracket marks the end of the array literal.\n                          if (value == \"]\") {\n                            break;\n                          }\n                          // If the array literal contains elements, the current token\n                          // should be a comma separating the previous element from the\n                          // next.\n                          if (hasMembers) {\n                            if (value == \",\") {\n                              value = lex();\n                              if (value == \"]\") {\n                                // Unexpected trailing `,` in array literal.\n                                abort();\n                              }\n                            } else {\n                              // A `,` must separate each array element.\n                              abort();\n                            }\n                          }\n                          // Elisions and leading commas are not permitted.\n                          if (value == \",\") {\n                            abort();\n                          }\n                          results.push(get(value));\n                        }\n                        return results;\n                      } else if (value == \"{\") {\n                        // Parses a JSON object, returning a new JavaScript object.\n                        results = {};\n                        for (;; hasMembers || (hasMembers = true)) {\n                          value = lex();\n                          // A closing curly brace marks the end of the object literal.\n                          if (value == \"}\") {\n                            break;\n                          }\n                          // If the object literal contains members, the current token\n                          // should be a comma separator.\n                          if (hasMembers) {\n                            if (value == \",\") {\n                              value = lex();\n                              if (value == \"}\") {\n                                // Unexpected trailing `,` in object literal.\n                                abort();\n                              }\n                            } else {\n                              // A `,` must separate each object member.\n                              abort();\n                            }\n                          }\n                          // Leading commas are not permitted, object property names must be\n                          // double-quoted strings, and a `:` must separate each property\n                          // name and value.\n                          if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                            abort();\n                          }\n                          results[value.slice(1)] = get(lex());\n                        }\n                        return results;\n                      }\n                      // Unexpected token encountered.\n                      abort();\n                    }\n                    return value;\n                  };\n\n                  // Internal: Updates a traversed object member.\n                  var update = function update(source, property, callback) {\n                    var element = walk(source, property, callback);\n                    if (element === undef) {\n                      delete source[property];\n                    } else {\n                      source[property] = element;\n                    }\n                  };\n\n                  // Internal: Recursively traverses a parsed JSON object, invoking the\n                  // `callback` function for each value. This is an implementation of the\n                  // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n                  var walk = function walk(source, property, callback) {\n                    var value = source[property],\n                        length;\n                    if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) == \"object\" && value) {\n                      // `forEach` can't be used to traverse an array in Opera <= 8.54\n                      // because its `Object#hasOwnProperty` implementation returns `false`\n                      // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n                      if (getClass.call(value) == arrayClass) {\n                        for (length = value.length; length--;) {\n                          update(value, length, callback);\n                        }\n                      } else {\n                        _forEach(value, function (property) {\n                          update(value, property, callback);\n                        });\n                      }\n                    }\n                    return callback.call(source, property, value);\n                  };\n\n                  // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n                  exports.parse = function (source, callback) {\n                    var result, value;\n                    Index = 0;\n                    Source = \"\" + source;\n                    result = get(lex());\n                    // If a JSON string contains multiple tokens, it is invalid.\n                    if (lex() != \"$\") {\n                      abort();\n                    }\n                    // Reset the parser state.\n                    Index = Source = null;\n                    return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n                  };\n                }\n              }\n\n              exports[\"runInContext\"] = runInContext;\n              return exports;\n            }\n\n            if (freeExports && !isLoader) {\n              // Export for CommonJS environments.\n              runInContext(root, freeExports);\n            } else {\n              // Export for web browsers and JavaScript engines.\n              var nativeJSON = root.JSON,\n                  previousJSON = root[\"JSON3\"],\n                  isRestored = false;\n\n              var JSON3 = runInContext(root, root[\"JSON3\"] = {\n                // Public: Restores the original value of the global `JSON` object and\n                // returns a reference to the `JSON3` object.\n                \"noConflict\": function noConflict() {\n                  if (!isRestored) {\n                    isRestored = true;\n                    root.JSON = nativeJSON;\n                    root[\"JSON3\"] = previousJSON;\n                    nativeJSON = previousJSON = null;\n                  }\n                  return JSON3;\n                }\n              });\n\n              root.JSON = {\n                \"parse\": JSON3.parse,\n                \"stringify\": JSON3.stringify\n              };\n            }\n\n            // Export for asynchronous module loaders.\n            if (isLoader) {\n              define(function () {\n                return JSON3;\n              });\n            }\n          }).call(this);\n        }).call(this, typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n      }, {}], 51: [function (_dereq_, module, exports) {\n        module.exports = toArray;\n\n        function toArray(list, index) {\n          var array = [];\n\n          index = index || 0;\n\n          for (var i = index || 0; i < list.length; i++) {\n            array[i - index] = list[i];\n          }\n\n          return array;\n        }\n      }, {}] }, {}, [31])(31);\n  });\n}\n\ncc._RF.pop();\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\cb\\cb804921-c57f-4d32-84f3-5ba70007a34b.js":{"source":"\"use strict\";\ncc._RF.push(module, 'cb804khxX9NMoTzW6cAB6NL', 'loading');\n// script/components/loading.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        _progress: 0.0,\n        _splash: null,\n        _isLoading: false\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        if (!cc.sys.isNative && cc.sys.isMobile) {\n            var canvas = this.node.getComponent(cc.Canvas);\n            canvas.fitHeight = true;\n            canvas.fitWidth = true;\n        }\n        this.initMgr();\n        this._splash = cc.find(\"Canvas/splash\");\n        this._splash.active = true;\n\n        cc.tools.audio.playBGM(\"bgMain.mp3\");\n        var xhr = cc.tools.http.httpPost(\"/tokens\", { username: 'admin', password: '123456' }, function (ret) {\n            cc.tools.http.authorization = ret;\n            cc.tools.http.httpGet(\"/tokens\", function (ret) {\n                //console.log(ret);\n                /**\r\n                 *  后台交互需要token \r\n                 **/\n                if (cc.tools.http.authorization !== \"\" && cc.tools.http.authorization !== \"-1\") {\n                    io(\"http://127.0.0.1:9081/bm/system?token=\" + cc.tools.http.authorization);\n                }\n            });\n        });\n    },\n    start: function start() {\n        var self = this;\n        var SHOW_TIME = 3000;\n        var FADE_TIME = 500;\n        if (cc.sys.os != cc.sys.OS_IOS || !cc.sys.isNative) {\n            self._splash.active = true;\n        } else {\n            self._splash.active = false;\n        }\n    },\n    initMgr: function initMgr() {\n        cc.tools = {};\n        cc.tools.http = require(\"HTTP\");\n\n        var Audio = require(\"Audio\");\n        cc.tools.audio = new Audio();\n        cc.tools.audio.init();\n\n        if (cc.sys.isNative) {\n            window.io = SocketIO;\n        } else {\n            window.io = require(\"socket.io\");\n        }\n    }\n\n});\n\ncc._RF.pop();","deps":{"HTTP":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\fb\\fb977eef-db8f-432a-8f42-bf3d8d970e95.js","Audio":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\08\\088657d1-aafb-450b-8525-cc8d95776cca.js","socket.io":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\c3\\c3362f07-3cd8-4e58-8025-6ae3c744fd20.js"}},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\16\\16d18a3f-c622-4bff-bac5-0eb1238388ab.js":{"source":"\"use strict\";\ncc._RF.push(module, '16d18o/xiJL/7rFDrEjg4ir', 'dialog');\n// script/action/login/dialog.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    onLoad: function onLoad() {\n        var self = this;\n        this._dialog = cc.find(\"Canvas/dialog\");\n        this._button = cc.find(\"Canvas/button\");\n        this._button.active = false;\n        this._girl = cc.find(\"Canvas/splash/background/girl\");\n        this._animCtrl = this._girl.getComponent(cc.Animation);\n    },\n    onClick: function onClick() {\n        this._dialog.active = false;\n        this._button.active = true;\n        this._animCtrl.play(\"girl_to_left\");\n    },\n    onShowClick: function onShowClick() {\n        this._button.active = false;\n        this._dialog.active = true;\n        var anim = this.getComponent(cc.Animation);\n        this._animCtrl.play(\"girl_to_right\");\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RF.pop();","deps":{}}},"packageCache":{"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\action\\login\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\action\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\package.json":false,"D:\\wordspace\\program\\beimi\\package.json":false,"D:\\wordspace\\program\\package.json":false,"D:\\wordspace\\package.json":false,"D:\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\action\\login\\register.js":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\components\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\components\\loading.js":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\lib\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\lib\\Audio.js":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\lib\\HTTP.js":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\assets\\script\\lib\\socket.io.js":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\fb\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\08\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\31\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\9e\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\cb\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\31\\31eac1eb-4757-4710-a879-200d307fae6a.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\31"},"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\9e\\9e146e9e-d85e-4863-b061-aece26cbd6c3.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\9e"},"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\cb\\cb804921-c57f-4d32-84f3-5ba70007a34b.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\cb"},"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\fb\\fb977eef-db8f-432a-8f42-bf3d8d970e95.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\fb"},"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\08\\088657d1-aafb-450b-8525-cc8d95776cca.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\08"},"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\c3\\package.json":false,"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\c3\\c3362f07-3cd8-4e58-8025-6ae3c744fd20.js":{"__dirname":"D:\\wordspace\\program\\beimi\\Client\\beimi\\library\\imports\\c3"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\action\\login\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\action\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\action\\login\\register.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\components\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\components\\loading.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\lib\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\lib\\Audio.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\lib\\HTTP.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\lib\\socket.io.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\cb\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\c3\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\08\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\9e\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\fb\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\08\\088657d1-aafb-450b-8525-cc8d95776cca.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\08"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\cb\\cb804921-c57f-4d32-84f3-5ba70007a34b.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\cb"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\9e\\9e146e9e-d85e-4863-b061-aece26cbd6c3.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\9e"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\fb\\fb977eef-db8f-432a-8f42-bf3d8d970e95.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\fb"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\c3\\c3362f07-3cd8-4e58-8025-6ae3c744fd20.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\c3"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\action\\login\\NewScript.js":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\16\\package.json":false,"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\16\\16d18a3f-c622-4bff-bac5-0eb1238388ab.js":{"__dirname":"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\library\\imports\\16"},"D:\\wordspace\\program\\beimi\\chess\\client\\beimi\\assets\\script\\action\\login\\dialog.js":false}}}